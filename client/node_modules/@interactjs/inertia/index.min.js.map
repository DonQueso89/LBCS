{
	"version": 3,
	"sources": [
		"index.ts"
	],
	"names": [
		"Modification",
		"modifiers",
		"offset",
		"dom",
		"hypot",
		"is",
		"copyCoords",
		"raf",
		"InertiaState",
		"constructor",
		"interaction",
		"this",
		"active",
		"isModified",
		"smoothEnd",
		"allowResume",
		"modification",
		"modifierCount",
		"modifierArg",
		"startCoords",
		"t0",
		"v0",
		"te",
		"targetOffset",
		"modifiedOffset",
		"currentOffset",
		"lambda_v0",
		"one_ve_v0",
		"timeout",
		"start",
		"event",
		"options",
		"getOptions",
		"enabled",
		"client",
		"velocityClient",
		"coords",
		"velocity",
		"pointerSpeed",
		"x",
		"y",
		"copyFrom",
		"_now",
		"cur",
		"page",
		"interactable",
		"element",
		"rect",
		"edges",
		"pageCoords",
		"preEnd",
		"phase",
		"timeStamp",
		"minSpeed",
		"endSpeed",
		"startInertia",
		"result",
		"setAll",
		"changed",
		"startSmoothEnd",
		"offsetBy",
		"_doPhase",
		"simulation",
		"startVelocity",
		"lambda",
		"resistance",
		"inertiaDur",
		"Math",
		"log",
		"delta",
		"request",
		"inertiaTick",
		"smoothEndTick",
		"t",
		"progress",
		"exp",
		"newOffset",
		"startX",
		"startY",
		"cpX",
		"cpY",
		"endX",
		"endY",
		"_getQBezierValue",
		"position",
		"move",
		"end",
		"smoothEndDuration",
		"duration",
		"easeOutQuad",
		"skipModifiers",
		"resume",
		"pointer",
		"eventTarget",
		"updatePointer",
		"prev",
		"stop",
		"cancel",
		"prepared",
		"name",
		"inertia",
		"id",
		"before",
		"install",
		"scope",
		"defaults",
		"usePlugin",
		"default",
		"actions",
		"phases",
		"inertiastart",
		"perAction",
		"listeners",
		"[object Object]",
		"_interacting",
		"arg",
		"state",
		"parentNode",
		"applyToInteraction",
		"setAndApply",
		"interactions:action-resume",
		"addEventModifiers",
		"interactions:action-inertiastart",
		"restoreInteractionCoords",
		"p1",
		"p2",
		"p3",
		"iT",
		"b",
		"c",
		"d"
	],
	"mappings": "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",
	"sourcesContent": [
		"import Modification from '@interactjs/modifiers/Modification'\nimport * as modifiers from '@interactjs/modifiers/base'\nimport offset from '@interactjs/offset/index'\nimport * as dom from '@interactjs/utils/domUtils'\nimport hypot from '@interactjs/utils/hypot'\nimport * as is from '@interactjs/utils/is'\nimport { copyCoords } from '@interactjs/utils/pointerUtils'\nimport raf from '@interactjs/utils/raf'\n\ndeclare module '@interactjs/core/InteractEvent' {\n  // eslint-disable-next-line no-shadow\n  interface PhaseMap {\n    resume?: true\n    inertiastart?: true\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    inertia?: InertiaState\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface PerActionDefaults {\n    inertia?: {\n      enabled?: boolean\n      resistance?: number        // the lambda in exponential decay\n      minSpeed?: number          // target speed must be above this for inertia to start\n      endSpeed?: number          // the speed at which inertia is slow enough to stop\n      allowResume?: true         // allow resuming an action in inertia phase\n      smoothEndDuration?: number // animate to snap/restrict endOnly if there's no inertia\n    }\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:before-action-inertiastart': Omit<Interact.DoPhaseArg<Interact.ActionName, 'inertiastart'>, 'iEvent'>\n    'interactions:action-inertiastart': Interact.DoPhaseArg<Interact.ActionName, 'inertiastart'>\n    'interactions:after-action-inertiastart': Interact.DoPhaseArg<Interact.ActionName, 'inertiastart'>\n    'interactions:before-action-resume': Omit<Interact.DoPhaseArg<Interact.ActionName, 'resume'>, 'iEvent'>\n    'interactions:action-resume': Interact.DoPhaseArg<Interact.ActionName, 'resume'>\n    'interactions:after-action-resume': Interact.DoPhaseArg<Interact.ActionName, 'resume'>\n  }\n}\n\nfunction install (scope: Interact.Scope) {\n  const {\n    defaults,\n  } = scope\n\n  scope.usePlugin(offset)\n  scope.usePlugin(modifiers.default)\n  scope.actions.phases.inertiastart = true\n  scope.actions.phases.resume = true\n\n  defaults.perAction.inertia = {\n    enabled          : false,\n    resistance       : 10,    // the lambda in exponential decay\n    minSpeed         : 100,   // target speed must be above this for inertia to start\n    endSpeed         : 10,    // the speed at which inertia is slow enough to stop\n    allowResume      : true,  // allow resuming an action in inertia phase\n    smoothEndDuration: 300,   // animate to snap/restrict endOnly if there's no inertia\n  }\n}\n\nexport class InertiaState {\n  active = false\n  isModified = false\n  smoothEnd = false\n  allowResume = false\n\n  modification: Modification = null\n  modifierCount = 0\n  modifierArg: modifiers.ModifierArg = null\n\n  startCoords: Interact.Point = null\n  t0 = 0\n  v0 = 0\n\n  te = 0\n  targetOffset: Interact.Point = null\n  modifiedOffset: Interact.Point = null\n  currentOffset: Interact.Point = null\n\n  lambda_v0? = 0 // eslint-disable-line camelcase\n  one_ve_v0? = 0 // eslint-disable-line camelcase\n  timeout: number = null\n\n  constructor (\n    private readonly interaction: Interact.Interaction,\n  ) {}\n\n  start (event: Interact.PointerEventType) {\n    const { interaction } = this\n    const options = getOptions(interaction)\n\n    if (!options || !options.enabled) {\n      return false\n    }\n\n    const { client: velocityClient } = interaction.coords.velocity\n    const pointerSpeed = hypot(velocityClient.x, velocityClient.y)\n    const modification = this.modification || (this.modification = new Modification(interaction))\n\n    modification.copyFrom(interaction.modification)\n\n    this.t0 = interaction._now()\n    this.allowResume = options.allowResume\n    this.v0 = pointerSpeed\n    this.currentOffset = { x: 0, y: 0 }\n    this.startCoords = interaction.coords.cur.page\n\n    this.modifierArg = {\n      interaction,\n      interactable: interaction.interactable,\n      element: interaction.element,\n      rect: interaction.rect,\n      edges: interaction.edges,\n      pageCoords: this.startCoords,\n      preEnd: true,\n      phase: 'inertiastart',\n    }\n\n    const thrown = (\n      (this.t0 - interaction.coords.cur.timeStamp) < 50 &&\n      pointerSpeed > options.minSpeed &&\n      pointerSpeed > options.endSpeed\n    )\n\n    if (thrown) {\n      this.startInertia()\n    } else {\n      modification.result = modification.setAll(this.modifierArg)\n\n      if (!modification.result.changed) {\n        return false\n      }\n\n      this.startSmoothEnd()\n    }\n\n    // force modification change\n    interaction.modification.result.rect = null\n\n    // bring inertiastart event to the target coords\n    interaction.offsetBy(this.targetOffset)\n    interaction._doPhase({\n      interaction,\n      event,\n      phase: 'inertiastart',\n    })\n    interaction.offsetBy({ x: -this.targetOffset.x, y: -this.targetOffset.y })\n    // force modification change\n    interaction.modification.result.rect = null\n\n    this.active = true\n    interaction.simulation = this\n\n    return true\n  }\n\n  startInertia () {\n    const startVelocity = this.interaction.coords.velocity.client\n    const options = getOptions(this.interaction)\n    const lambda = options.resistance\n    const inertiaDur = -Math.log(options.endSpeed / this.v0) / lambda\n\n    this.targetOffset = {\n      x: (startVelocity.x - inertiaDur) / lambda,\n      y: (startVelocity.y - inertiaDur) / lambda,\n    }\n\n    this.te = inertiaDur\n    this.lambda_v0 = lambda / this.v0\n    this.one_ve_v0 = 1 - options.endSpeed / this.v0\n\n    const { modification, modifierArg } = this\n\n    modifierArg.pageCoords = {\n      x: this.startCoords.x + this.targetOffset.x,\n      y: this.startCoords.y + this.targetOffset.y,\n    }\n\n    modification.result = modification.setAll(modifierArg)\n\n    if (modification.result.changed) {\n      this.isModified = true\n      this.modifiedOffset = {\n        x: this.targetOffset.x + modification.result.delta.x,\n        y: this.targetOffset.y + modification.result.delta.y,\n      }\n    }\n\n    this.timeout = raf.request(() => this.inertiaTick())\n  }\n\n  startSmoothEnd () {\n    this.smoothEnd = true\n    this.isModified = true\n    this.targetOffset = {\n      x: this.modification.result.delta.x,\n      y: this.modification.result.delta.y,\n    }\n\n    this.timeout = raf.request(() => this.smoothEndTick())\n  }\n\n  inertiaTick () {\n    const { interaction } = this\n    const options = getOptions(interaction)\n    const lambda = options.resistance\n    const t = (interaction._now() - this.t0) / 1000\n\n    if (t < this.te) {\n      const progress =  1 - (Math.exp(-lambda * t) - this.lambda_v0) / this.one_ve_v0\n      let newOffset: Interact.Point\n\n      if (this.isModified) {\n        newOffset = getQuadraticCurvePoint(\n          0, 0,\n          this.targetOffset.x, this.targetOffset.y,\n          this.modifiedOffset.x, this.modifiedOffset.y,\n          progress,\n        )\n      }\n      else {\n        newOffset = {\n          x: this.targetOffset.x * progress,\n          y: this.targetOffset.y * progress,\n        }\n      }\n\n      const delta = { x: newOffset.x - this.currentOffset.x, y: newOffset.y - this.currentOffset.y }\n\n      this.currentOffset.x += delta.x\n      this.currentOffset.y += delta.y\n\n      interaction.offsetBy(delta)\n      interaction.move()\n\n      this.timeout = raf.request(() => this.inertiaTick())\n    }\n    else {\n      interaction.offsetBy({\n        x: this.modifiedOffset.x - this.currentOffset.x,\n        y: this.modifiedOffset.y - this.currentOffset.y,\n      })\n\n      this.end()\n    }\n  }\n\n  smoothEndTick () {\n    const { interaction } = this\n    const t = interaction._now() - this.t0\n    const { smoothEndDuration: duration } = getOptions(interaction)\n\n    if (t < duration) {\n      const newOffset = {\n        x: easeOutQuad(t, 0, this.targetOffset.x, duration),\n        y: easeOutQuad(t, 0, this.targetOffset.y, duration),\n      }\n      const delta = {\n        x: newOffset.x - this.currentOffset.x,\n        y: newOffset.y - this.currentOffset.y,\n      }\n\n      this.currentOffset.x += delta.x\n      this.currentOffset.y += delta.y\n\n      interaction.offsetBy(delta)\n      interaction.move({ skipModifiers: this.modifierCount })\n\n      this.timeout = raf.request(() => this.smoothEndTick())\n    }\n    else {\n      interaction.offsetBy({\n        x: this.targetOffset.x - this.currentOffset.x,\n        y: this.targetOffset.y - this.currentOffset.y,\n      })\n\n      this.end()\n    }\n  }\n\n  resume ({ pointer, event, eventTarget }: Interact.SignalArgs['interactions:down']) {\n    const { interaction } = this\n\n    // undo inertia changes to interaction coords\n    interaction.offsetBy({\n      x: -this.currentOffset.x,\n      y: -this.currentOffset.y,\n    })\n\n    // update pointer at pointer down position\n    interaction.updatePointer(pointer, event, eventTarget, true)\n\n    // fire resume signals and event\n    interaction._doPhase({\n      interaction,\n      event,\n      phase: 'resume',\n    })\n    copyCoords(interaction.coords.prev, interaction.coords.cur)\n\n    this.stop()\n  }\n\n  end () {\n    this.interaction.move()\n    this.interaction.end()\n    this.stop()\n  }\n\n  stop () {\n    this.active = this.smoothEnd = false\n    this.interaction.simulation = null\n    raf.cancel(this.timeout)\n  }\n}\n\nfunction start ({ interaction, event }: Interact.DoPhaseArg<Interact.ActionName, 'end'>) {\n  if (!interaction._interacting || interaction.simulation) {\n    return null\n  }\n\n  const started = interaction.inertia.start(event)\n\n  // prevent action end if inertia or smoothEnd\n  return started ? false : null\n}\n\n// Check if the down event hits the current inertia target\n// control should be return to the user\nfunction resume (arg: Interact.SignalArgs['interactions:down']) {\n  const { interaction, eventTarget } = arg\n  const state = interaction.inertia\n\n  if (!state.active) { return }\n\n  let element = eventTarget as Node\n\n  // climb up the DOM tree from the event target\n  while (is.element(element)) {\n    // if interaction element is the current inertia target element\n    if (element === interaction.element) {\n      state.resume(arg)\n      break\n    }\n\n    element = dom.parentNode(element)\n  }\n}\n\nfunction stop ({ interaction }: { interaction: Interact.Interaction }) {\n  const state = interaction.inertia\n\n  if (state.active) {\n    state.stop()\n  }\n}\n\nfunction getOptions ({ interactable, prepared }: Interact.Interaction) {\n  return interactable &&\n    interactable.options &&\n    prepared.name &&\n    interactable.options[prepared.name].inertia\n}\n\nconst inertia: Interact.Plugin = {\n  id: 'inertia',\n  before: ['modifiers/base'],\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.inertia = new InertiaState(interaction)\n    },\n\n    'interactions:before-action-end': start,\n    'interactions:down': resume,\n    'interactions:stop': stop,\n\n    'interactions:before-action-resume': arg => {\n      const { modification } = arg.interaction\n\n      modification.stop(arg)\n      modification.start(arg, arg.interaction.coords.cur.page)\n      modification.applyToInteraction(arg)\n    },\n\n    'interactions:before-action-inertiastart': arg => arg.interaction.modification.setAndApply(arg),\n    'interactions:action-resume': modifiers.addEventModifiers,\n    'interactions:action-inertiastart': modifiers.addEventModifiers,\n    'interactions:after-action-inertiastart': arg => arg.interaction.modification.restoreInteractionCoords(arg),\n    'interactions:after-action-resume': arg => arg.interaction.modification.restoreInteractionCoords(arg),\n  },\n}\n\n// http://stackoverflow.com/a/5634528/2280888\nfunction _getQBezierValue (t: number, p1: number, p2: number, p3: number) {\n  const iT = 1 - t\n  return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3\n}\n\nfunction getQuadraticCurvePoint (\n  startX: number, startY: number, cpX: number, cpY: number, endX: number, endY: number, position: number) {\n  return {\n    x:  _getQBezierValue(position, startX, cpX, endX),\n    y:  _getQBezierValue(position, startY, cpY, endY),\n  }\n}\n\n// http://gizma.com/easing/\nfunction easeOutQuad (t: number, b: number, c: number, d: number) {\n  t /= d\n  return -c * t * (t - 2) + b\n}\n\nexport default inertia\n"
	]
}