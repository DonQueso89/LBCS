import*as e from"../utils/index.min.js";function t({interaction:t,iEvent:s,phase:n}){if("gesture"!==t.prepared.name)return;const a=t.pointers.map(e=>e.pointer),i="start"===n,r="end"===n,o=t.interactable.options.deltaSource;if(s.touches=[a[0],a[1]],i)s.distance=e.pointer.touchDistance(a,o),s.box=e.pointer.touchBBox(a),s.scale=1,s.ds=0,s.angle=e.pointer.touchAngle(a,o),s.da=0,t.gesture.startDistance=s.distance,t.gesture.startAngle=s.angle;else if(r){const e=t.prevEvent;s.distance=e.distance,s.box=e.box,s.scale=e.scale,s.ds=0,s.angle=e.angle,s.da=0}else s.distance=e.pointer.touchDistance(a,o),s.box=e.pointer.touchBBox(a),s.scale=s.distance/t.gesture.startDistance,s.angle=e.pointer.touchAngle(a,o),s.ds=s.scale-t.gesture.scale,s.da=s.angle-t.gesture.angle;t.gesture.distance=s.distance,t.gesture.angle=s.angle,e.is.number(s.scale)&&s.scale!==1/0&&!isNaN(s.scale)&&(t.gesture.scale=s.scale)}const s={id:"actions/gesture",before:["actions/drag","actions/resize"],install(t){const{actions:n,Interactable:a,defaults:i}=t;a.prototype.gesturable=function(t){return e.is.object(t)?(this.options.gesture.enabled=!1!==t.enabled,this.setPerAction("gesture",t),this.setOnEvents("gesture",t),this):e.is.bool(t)?(this.options.gesture.enabled=t,this):this.options.gesture},n.map.gesture=s,n.methodDict.gesture="gesturable",i.actions.gesture=s.defaults},listeners:{"interactions:action-start":t,"interactions:action-move":t,"interactions:action-end":t,"interactions:new"({interaction:e}){e.gesture={angle:0,distance:0,scale:1,startAngle:0,startDistance:0}},"auto-start:check"(e){if(e.interaction.pointers.length<2)return;const t=e.interactable.options.gesture;return t&&t.enabled?(e.action={name:"gesture"},!1):void 0}},defaults:{},getCursor:()=>""};export default s;
//# sourceMappingURL=gesture.min.js.map