{
	"version": 3,
	"sources": [
		"resize.ts"
	],
	"names": [
		"Interaction",
		"dom",
		"extend",
		"is",
		"install",
		"scope",
		"actions",
		"browser",
		"Interactable",
		"defaults",
		"resize",
		"cursors",
		"initCursors",
		"defaultMargin",
		"supportsTouch",
		"supportsPointerEvent",
		"prototype",
		"resizable",
		"options",
		"map",
		"methodDict",
		"resizeChecker",
		"arg",
		"interaction",
		"interactable",
		"element",
		"rect",
		"buttons",
		"undefined",
		"page",
		"coords",
		"cur",
		"resizeOptions",
		"enabled",
		"pointerIsDown",
		"test",
		"pointerType",
		"mouseButtons",
		"object",
		"edges",
		"resizeEdges",
		"left",
		"right",
		"top",
		"bottom",
		"edge",
		"checkResizeEdge",
		"_latestPointer",
		"eventTarget",
		"margin",
		"action",
		"name",
		"axis",
		"x",
		"y",
		"axes",
		"setPerAction",
		"setOnEvents",
		"string",
		"bool",
		"preserveAspectRatio",
		"square",
		"value",
		"interactableElement",
		"width",
		"number",
		"height",
		"Math",
		"min",
		"matchesUpTo",
		"isIe9",
		"xy",
		"topleft",
		"bottomright",
		"topright",
		"bottomleft",
		"start",
		"iEvent",
		"prepared",
		"resizeEvent",
		"_rects",
		"corrected",
		"previous",
		"delta",
		"deltaRect",
		"move",
		"invert",
		"invertible",
		"current",
		"startRect",
		"swap",
		"max",
		"end",
		"updateEventAxes",
		"resizeAxes",
		"id",
		"before",
		"listeners",
		"NaN",
		"getCursor",
		"result",
		"cursorKey"
	],
	"mappings": "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",
	"sourcesContent": [
		"import { Interaction } from '@interactjs/core/Interaction'\nimport Scope from '@interactjs/core/scope'\nimport * as dom from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport * as is from '@interactjs/utils/is'\n\nexport type EdgeName = 'top' | 'left' | 'bottom' | 'right'\n\nexport type ResizableMethod = Interact.ActionMethod<Interact.ResizableOptions>\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    resizable: ResizableMethod\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    resizeAxes: 'x' | 'y' | 'xy'\n    resizeStartAspectRatio: number\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    resize: Interact.ResizableOptions\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface ActionMap {\n    resize?: typeof resize\n  }\n}\n\nexport interface ResizeEvent<P extends Interact.EventPhase = Interact.EventPhase> extends Interact.InteractEvent<'resize', P> {\n  deltaRect?: Interact.FullRect\n  edges?: Interact.ActionProps['edges']\n}\n\nfunction install (scope: Scope) {\n  const {\n    actions,\n    browser,\n    /** @lends Interactable */\n    Interactable, // tslint:disable-line no-shadowed-variable\n    defaults,\n  } = scope\n\n  // Less Precision with touch input\n\n  resize.cursors = initCursors(browser)\n  resize.defaultMargin = browser.supportsTouch || browser.supportsPointerEvent ? 20 : 10\n\n  /**\n   * ```js\n   * interact(element).resizable({\n   *   onstart: function (event) {},\n   *   onmove : function (event) {},\n   *   onend  : function (event) {},\n   *\n   *   edges: {\n   *     top   : true,       // Use pointer coords to check for resize.\n   *     left  : false,      // Disable resizing from left edge.\n   *     bottom: '.resize-s',// Resize if pointer target matches selector\n   *     right : handleEl    // Resize if pointer target is the given Element\n   *   },\n   *\n   *     // Width and height can be adjusted independently. When `true`, width and\n   *     // height are adjusted at a 1:1 ratio.\n   *     square: false,\n   *\n   *     // Width and height can be adjusted independently. When `true`, width and\n   *     // height maintain the aspect ratio they had when resizing started.\n   *     preserveAspectRatio: false,\n   *\n   *   // a value of 'none' will limit the resize rect to a minimum of 0x0\n   *   // 'negate' will allow the rect to have negative width/height\n   *   // 'reposition' will keep the width/height positive by swapping\n   *   // the top and bottom edges and/or swapping the left and right edges\n   *   invert: 'none' || 'negate' || 'reposition'\n   *\n   *   // limit multiple resizes.\n   *   // See the explanation in the {@link Interactable.draggable} example\n   *   max: Infinity,\n   *   maxPerElement: 1,\n   * })\n   *\n   * var isResizeable = interact(element).resizable()\n   * ```\n   *\n   * Gets or sets whether resize actions can be performed on the target\n   *\n   * @param {boolean | object} [options] true/false or An object with event\n   * listeners to be fired on resize events (object makes the Interactable\n   * resizable)\n   * @return {boolean | Interactable} A boolean indicating if this can be the\n   * target of resize elements, or this Interactable\n   */\n  Interactable.prototype.resizable = function (this: Interact.Interactable, options: Interact.ResizableOptions | boolean) {\n    return resizable(this, options, scope)\n  } as ResizableMethod\n\n  actions.map.resize = resize\n  actions.methodDict.resize = 'resizable'\n\n  defaults.actions.resize = resize.defaults\n}\n\nfunction resizeChecker (arg) {\n  const { interaction, interactable, element, rect, buttons } = arg\n\n  if (!rect) { return undefined }\n\n  const page = extend({}, interaction.coords.cur.page)\n  const resizeOptions = interactable.options.resize\n\n  if (\n    !(resizeOptions && resizeOptions.enabled) ||\n    // check mouseButton setting if the pointer is down\n    (interaction.pointerIsDown &&\n     /mouse|pointer/.test(interaction.pointerType) &&\n   (buttons & resizeOptions.mouseButtons) === 0)\n  ) {\n    return undefined\n  }\n\n  // if using resize.edges\n  if (is.object(resizeOptions.edges)) {\n    const resizeEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false,\n    }\n\n    for (const edge in resizeEdges) {\n      resizeEdges[edge] = checkResizeEdge(edge,\n        resizeOptions.edges[edge],\n        page,\n        interaction._latestPointer.eventTarget,\n        element,\n        rect,\n        resizeOptions.margin || resize.defaultMargin)\n    }\n\n    resizeEdges.left = resizeEdges.left && !resizeEdges.right\n    resizeEdges.top  = resizeEdges.top  && !resizeEdges.bottom\n\n    if (resizeEdges.left || resizeEdges.right || resizeEdges.top || resizeEdges.bottom) {\n      arg.action = {\n        name: 'resize',\n        edges: resizeEdges,\n      }\n    }\n  }\n  else {\n    const right  = resizeOptions.axis !== 'y' && page.x > (rect.right  - resize.defaultMargin)\n    const bottom = resizeOptions.axis !== 'x' && page.y > (rect.bottom - resize.defaultMargin)\n\n    if (right || bottom) {\n      arg.action = {\n        name: 'resize',\n        axes: (right ? 'x' : '') + (bottom ? 'y' : ''),\n      }\n    }\n  }\n\n  return arg.action ? false : undefined\n}\n\nfunction resizable (interactable: Interact.Interactable, options: Interact.OrBoolean<Interact.ResizableOptions> | boolean, scope: Scope) {\n  if (is.object(options)) {\n    interactable.options.resize.enabled = options.enabled !== false\n    interactable.setPerAction('resize', options)\n    interactable.setOnEvents('resize', options)\n\n    if (is.string(options.axis) && /^x$|^y$|^xy$/.test(options.axis)) {\n      interactable.options.resize.axis = options.axis\n    }\n    else if (options.axis === null) {\n      interactable.options.resize.axis = scope.defaults.actions.resize.axis\n    }\n\n    if (is.bool(options.preserveAspectRatio)) {\n      interactable.options.resize.preserveAspectRatio = options.preserveAspectRatio\n    }\n    else if (is.bool(options.square)) {\n      interactable.options.resize.square = options.square\n    }\n\n    return interactable\n  }\n  if (is.bool(options)) {\n    interactable.options.resize.enabled = options\n\n    return interactable\n  }\n  return interactable.options.resize\n}\n\nfunction checkResizeEdge (\n  name: string,\n  value: any,\n  page: Interact.Point,\n  element: Node,\n  interactableElement: Interact.Element,\n  rect: Interact.Rect,\n  margin: number,\n) {\n  // false, '', undefined, null\n  if (!value) { return false }\n\n  // true value, use pointer coords and element rect\n  if (value === true) {\n    // if dimensions are negative, \"switch\" edges\n    const width  = is.number(rect.width) ? rect.width  : rect.right  - rect.left\n    const height = is.number(rect.height) ? rect.height : rect.bottom - rect.top\n\n    // don't use margin greater than half the relevent dimension\n    margin = Math.min(margin, (name === 'left' || name === 'right' ? width : height) / 2)\n\n    if (width < 0) {\n      if      (name === 'left')  { name = 'right' }\n      else if (name === 'right') { name = 'left'  }\n    }\n    if (height < 0) {\n      if      (name === 'top')    { name = 'bottom' }\n      else if (name === 'bottom') { name = 'top'    }\n    }\n\n    if (name === 'left') { return page.x < ((width  >= 0 ? rect.left : rect.right) + margin) }\n    if (name === 'top') { return page.y < ((height >= 0 ? rect.top : rect.bottom) + margin) }\n\n    if (name === 'right') { return page.x > ((width  >= 0 ? rect.right : rect.left) - margin) }\n    if (name === 'bottom') { return page.y > ((height >= 0 ? rect.bottom : rect.top) - margin) }\n  }\n\n  // the remaining checks require an element\n  if (!is.element(element)) { return false }\n\n  return is.element(value)\n  // the value is an element to use as a resize handle\n    ? value === element\n    // otherwise check if element matches value as selector\n    : dom.matchesUpTo(element, value, interactableElement)\n}\n\nfunction initCursors (browser: typeof import ('@interactjs/utils/browser').default) {\n  return (browser.isIe9 ? {\n    x : 'e-resize',\n    y : 's-resize',\n    xy: 'se-resize',\n\n    top        : 'n-resize',\n    left       : 'w-resize',\n    bottom     : 's-resize',\n    right      : 'e-resize',\n    topleft    : 'se-resize',\n    bottomright: 'se-resize',\n    topright   : 'ne-resize',\n    bottomleft : 'ne-resize',\n  } : {\n    x : 'ew-resize',\n    y : 'ns-resize',\n    xy: 'nwse-resize',\n\n    top        : 'ns-resize',\n    left       : 'ew-resize',\n    bottom     : 'ns-resize',\n    right      : 'ew-resize',\n    topleft    : 'nwse-resize',\n    bottomright: 'nwse-resize',\n    topright   : 'nesw-resize',\n    bottomleft : 'nesw-resize',\n  })\n}\n\nfunction start ({ iEvent, interaction }: { iEvent: Interact.InteractEvent<any, any>, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) {\n    return\n  }\n\n  const resizeEvent = iEvent as ResizeEvent\n  const rect = interaction.rect\n\n  interaction._rects = {\n    start: extend({}, rect),\n    corrected: extend({}, rect),\n    previous: extend({}, rect),\n    delta: {\n      left: 0,\n      right : 0,\n      width : 0,\n      top : 0,\n      bottom: 0,\n      height: 0,\n    },\n  }\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = interaction._rects.corrected\n  resizeEvent.deltaRect = interaction._rects.delta\n}\n\nfunction move ({ iEvent, interaction }: { iEvent: Interact.InteractEvent<any, any>, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) { return }\n\n  const resizeEvent = iEvent as ResizeEvent\n  const resizeOptions = interaction.interactable.options.resize\n  const invert = resizeOptions.invert\n  const invertible = invert === 'reposition' || invert === 'negate'\n\n  // eslint-disable-next-line no-shadow\n  const current = interaction.rect\n  const { start: startRect, corrected, delta: deltaRect, previous } = interaction._rects\n\n  extend(previous, corrected)\n\n  if (invertible) {\n    // if invertible, copy the current rect\n    extend(corrected, current)\n\n    if (invert === 'reposition') {\n      // swap edge values if necessary to keep width/height positive\n      if (corrected.top > corrected.bottom) {\n        const swap = corrected.top\n\n        corrected.top = corrected.bottom\n        corrected.bottom = swap\n      }\n      if (corrected.left > corrected.right) {\n        const swap = corrected.left\n\n        corrected.left = corrected.right\n        corrected.right = swap\n      }\n    }\n  }\n  else {\n    // if not invertible, restrict to minimum of 0x0 rect\n    corrected.top    = Math.min(current.top, startRect.bottom)\n    corrected.bottom = Math.max(current.bottom, startRect.top)\n    corrected.left   = Math.min(current.left, startRect.right)\n    corrected.right  = Math.max(current.right, startRect.left)\n  }\n\n  corrected.width  = corrected.right  - corrected.left\n  corrected.height = corrected.bottom - corrected.top\n\n  for (const edge in corrected) {\n    deltaRect[edge] = corrected[edge] - previous[edge]\n  }\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = corrected\n  resizeEvent.deltaRect = deltaRect\n}\n\nfunction end ({ iEvent, interaction }: { iEvent: Interact.InteractEvent<any, any>, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) { return }\n\n  const resizeEvent = iEvent as ResizeEvent\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = interaction._rects.corrected\n  resizeEvent.deltaRect = interaction._rects.delta\n}\n\nfunction updateEventAxes ({ iEvent, interaction }: { iEvent: Interact.InteractEvent<any, any>, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.resizeAxes) { return }\n\n  const options = interaction.interactable.options\n  const resizeEvent = iEvent as ResizeEvent\n\n  if (options.resize.square) {\n    if (interaction.resizeAxes === 'y') {\n      resizeEvent.delta.x = resizeEvent.delta.y\n    }\n    else {\n      resizeEvent.delta.y = resizeEvent.delta.x\n    }\n    resizeEvent.axes = 'xy'\n  }\n  else {\n    resizeEvent.axes = interaction.resizeAxes\n\n    if (interaction.resizeAxes === 'x') {\n      resizeEvent.delta.y = 0\n    }\n    else if (interaction.resizeAxes === 'y') {\n      resizeEvent.delta.x = 0\n    }\n  }\n}\n\nconst resize: Interact.Plugin = {\n  id: 'actions/resize',\n  before: ['actions/drag'],\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.resizeAxes = 'xy'\n    },\n\n    'interactions:action-start': arg => {\n      start(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-move': arg => {\n      move(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-end': end,\n    'auto-start:check': resizeChecker,\n  },\n\n  defaults: {\n    square: false,\n    preserveAspectRatio: false,\n    axis: 'xy',\n\n    // use default margin\n    margin: NaN,\n\n    // object with props left, right, top, bottom which are\n    // true/false values to resize when the pointer is over that edge,\n    // CSS selectors to match the handles for each direction\n    // or the Elements for each handle\n    edges: null,\n\n    // a value of 'none' will limit the resize rect to a minimum of 0x0\n    // 'negate' will alow the rect to have negative width/height\n    // 'reposition' will keep the width/height positive by swapping\n    // the top and bottom edges and/or swapping the left and right edges\n    invert: 'none',\n  } as Interact.ResizableOptions,\n\n  cursors: null as ReturnType<typeof initCursors>,\n\n  getCursor ({ edges, axis, name }: Interact.ActionProps) {\n    const cursors = resize.cursors\n    let result: string = null\n\n    if (axis) {\n      result = cursors[name + axis]\n    }\n    else if (edges) {\n      let cursorKey = ''\n\n      for (const edge of ['top', 'bottom', 'left', 'right']) {\n        if (edges[edge]) {\n          cursorKey += edge\n        }\n      }\n\n      result = cursors[cursorKey]\n    }\n\n    return result\n  },\n\n  defaultMargin: null as number,\n}\n\nexport default resize\n"
	]
}