{
	"version": 3,
	"sources": [
		"grid.ts"
	],
	"names": [
		"grid",
		"coordFields",
		"filter",
		"xField",
		"yField",
		"gridFunc",
		"x",
		"y",
		"range",
		"limits",
		"left",
		"Infinity",
		"right",
		"top",
		"bottom",
		"offset",
		"result",
		"gridx",
		"Math",
		"round",
		"gridy",
		"max",
		"min"
	],
	"mappings": "eAMgBA,IACd,MAAMC,EAAe,CACnB,CAAC,IAAK,KACN,CAAC,OAAQ,OACT,CAAC,QAAS,UACV,CAAC,QAAS,WACAC,OAAO,EAAEC,EAAQC,KAAYD,KAAUH,GAAQI,KAAUJ,GAE/DK,EAGF,CAACC,EAAGC,KACN,MAAMC,MACJA,EADIC,OAEJA,EAAS,CACPC,MAASC,EAAAA,EACTC,MAASD,EAAAA,EACTE,KAASF,EAAAA,EACTG,OAASH,EAAAA,GANPI,OAQJA,EAAS,CAAET,EAAG,EAAGC,EAAG,IAClBP,EAEEgB,EAEF,CAAER,MAAAA,EAAOR,KAAAA,EAAMM,EAAG,KAAgBC,EAAG,MAEzC,IAAK,MAAOJ,EAAQC,KAAWH,EAAa,CAC1C,MAAMgB,EAAQC,KAAKC,OAAOb,EAAIS,EAAOT,GAAMN,EAAaG,IAClDiB,EAAQF,KAAKC,OAAOZ,EAAIQ,EAAOR,GAAMP,EAAaI,IAExDY,EAAOb,GAAUe,KAAKG,IAAIZ,EAAOC,KAAMQ,KAAKI,IAAIb,EAAOG,MAAOK,EAASjB,EAAaG,GAAUY,EAAOT,IACrGU,EAAOZ,GAAUc,KAAKG,IAAIZ,EAAOI,IAAKK,KAAKI,IAAIb,EAAOK,OAAQM,EAASpB,EAAaI,GAAUW,EAAOR,IAGvG,OAAOS,GAMT,OAHAX,EAASL,KAAOA,EAChBK,EAASJ,YAAcA,EAEhBI",
	"sourcesContent": [
		"export type GridOptions = (Partial<Interact.Rect> | Interact.Point) & {\n  range?: number\n  limits?: Interact.Rect\n  offset?: Interact.Point\n}\n\nexport default (grid: GridOptions) => {\n  const coordFields = ([\n    ['x', 'y'],\n    ['left', 'top'],\n    ['right', 'bottom'],\n    ['width', 'height'],\n  ] as const).filter(([xField, yField]) => xField in grid || yField in grid)\n\n  const gridFunc: Interact.SnapFunction & {\n    grid: typeof grid\n    coordFields: typeof coordFields\n  } = (x, y) => {\n    const {\n      range,\n      limits = {\n        left  : -Infinity,\n        right :  Infinity,\n        top   : -Infinity,\n        bottom:  Infinity,\n      },\n      offset = { x: 0, y: 0 },\n    } = grid\n\n    const result: Interact.SnapTarget & {\n      grid: typeof grid\n    } = { range, grid, x: null as number, y: null as number }\n\n    for (const [xField, yField] of coordFields) {\n      const gridx = Math.round((x - offset.x) / (grid as any)[xField])\n      const gridy = Math.round((y - offset.y) / (grid as any)[yField])\n\n      result[xField] = Math.max(limits.left, Math.min(limits.right, gridx * (grid as any)[xField] + offset.x))\n      result[yField] = Math.max(limits.top, Math.min(limits.bottom, gridy * (grid as any)[yField] + offset.y))\n    }\n\n    return result\n  }\n\n  gridFunc.grid = grid\n  gridFunc.coordFields = coordFields\n\n  return gridFunc\n}\n"
	]
}