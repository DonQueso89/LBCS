{
	"version": 3,
	"sources": [
		"base.ts"
	],
	"names": [
		"Interaction",
		"Scope",
		"utils",
		"PointerEvent",
		"pointerEvents",
		"id",
		"install",
		"scope",
		"defaults",
		"actions",
		"extend",
		"phaselessTypes",
		"types",
		"listeners",
		"[object Object]",
		"interaction",
		"prevTap",
		"tapTime",
		"down",
		"pointerInfo",
		"hold",
		"duration",
		"Infinity",
		"timeout",
		"pointer",
		"event",
		"eventTarget",
		"duplicate",
		"pointerIndex",
		"getPointerIndex",
		"pointerIsDown",
		"pointerWasMoved",
		"clearTimeout",
		"pointers",
		"fire",
		"type",
		"arg",
		"timer",
		"path",
		"dom",
		"getPath",
		"signalArg",
		"targets",
		"node",
		"length",
		"minDuration",
		"target",
		"holdDuration",
		"eventable",
		"options",
		"setTimeout",
		"downAndStartHold",
		"clearHold",
		"tapAfterUp",
		"collectEventTargets",
		"ignoreFrom",
		"allowFrom",
		"origin",
		"x",
		"y",
		"move",
		"up",
		"cancel",
		"tap",
		"doubletap",
		"pointerEvent",
		"now",
		"i",
		"prop",
		"props",
		"getOriginXY",
		"_subtractOrigin",
		"currentTarget",
		"_addOrigin",
		"immediatePropagationStopped",
		"propagationStopped",
		"double",
		"timeStamp",
		"downTarget",
		"filter"
	],
	"mappings": "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",
	"sourcesContent": [
		"import Eventable from '@interactjs/core/Eventable'\nimport Interaction from '@interactjs/core/Interaction'\nimport { PerActionDefaults } from '@interactjs/core/defaultOptions'\nimport Scope from '@interactjs/core/scope'\nimport * as utils from '@interactjs/utils/index'\nimport PointerEvent from './PointerEvent'\n\nexport type EventTargetList = Array<{\n  node: Node\n  eventable: Eventable\n  props: { [key: string]: any }\n}>\n\nexport interface PointerEventOptions extends PerActionDefaults {\n  enabled?: undefined // not used\n  holdDuration?: number\n  ignoreFrom?: any\n  allowFrom?: any\n  origin?: Interact.Point | string | Interact.Element\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    pointerEvents: typeof pointerEvents\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    prevTap?: PointerEvent<string>\n    tapTime?: number\n  }\n}\n\ndeclare module '@interactjs/core/PointerInfo' {\n  interface PointerInfo {\n    hold?: {\n      duration: number\n      timeout: any\n    }\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    pointerEvents: Interact.Options\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'pointerEvents:new': { pointerEvent: PointerEvent<any> }\n    'pointerEvents:fired': {\n      interaction: Interaction\n      pointer: Interact.PointerType | PointerEvent<any>\n      event: Interact.PointerEventType | PointerEvent<any>\n      eventTarget: Interact.EventTarget\n      pointerEvent: PointerEvent<any>\n      targets?: EventTargetList\n      type: string\n    }\n    'pointerEvents:collect-targets': {\n      interaction: Interaction\n      pointer: Interact.PointerType | PointerEvent<any>\n      event: Interact.PointerEventType | PointerEvent<any>\n      eventTarget: Interact.EventTarget\n      targets?: EventTargetList\n      type: string\n      path: Node[]\n      node: null\n    }\n  }\n}\n\nconst defaults: PointerEventOptions = {\n  holdDuration: 600,\n  ignoreFrom  : null,\n  allowFrom   : null,\n  origin      : { x: 0, y: 0 },\n}\n\nconst pointerEvents = {\n  id: 'pointer-events/base',\n  install,\n  listeners: {\n    'interactions:new': addInteractionProps,\n    'interactions:update-pointer': addHoldInfo,\n    'interactions:move': moveAndClearHold,\n    'interactions:down': (arg, scope) => {\n      downAndStartHold(arg, scope)\n      fire(arg, scope)\n    },\n    'interactions:up': (arg, scope) => {\n      clearHold(arg)\n      fire(arg, scope)\n      tapAfterUp(arg, scope)\n    },\n    'interactions:cancel': (arg, scope) => {\n      clearHold(arg)\n      fire(arg, scope)\n    },\n  },\n  PointerEvent,\n  fire,\n  collectEventTargets,\n  defaults,\n  types: {\n    down: true,\n    move: true,\n    up: true,\n    cancel: true,\n    tap: true,\n    doubletap: true,\n    hold: true,\n  } as { [type: string]: true },\n}\n\nfunction fire<T extends string> (\n  arg: {\n    pointer: Interact.PointerType | PointerEvent<any>\n    event: Interact.PointerEventType | PointerEvent<any>\n    eventTarget: Interact.EventTarget\n    interaction: Interaction\n    type: T\n    targets?: EventTargetList\n  },\n  scope: Interact.Scope,\n) {\n  const {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    type,\n    targets = collectEventTargets(arg, scope),\n  } = arg\n\n  const pointerEvent = new PointerEvent(type, pointer, event, eventTarget, interaction, scope.now())\n\n  scope.fire('pointerEvents:new', { pointerEvent })\n\n  const signalArg = {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    targets,\n    type,\n    pointerEvent,\n  }\n\n  for (let i = 0; i < targets.length; i++) {\n    const target = targets[i]\n\n    for (const prop in target.props || {}) {\n      (pointerEvent as any)[prop] = target.props[prop]\n    }\n\n    const origin = utils.getOriginXY(target.eventable, target.node)\n\n    pointerEvent._subtractOrigin(origin)\n    pointerEvent.eventable = target.eventable\n    pointerEvent.currentTarget = target.node\n\n    target.eventable.fire(pointerEvent)\n\n    pointerEvent._addOrigin(origin)\n\n    if (pointerEvent.immediatePropagationStopped ||\n        (pointerEvent.propagationStopped &&\n            (i + 1) < targets.length && targets[i + 1].node !== pointerEvent.currentTarget)) {\n      break\n    }\n  }\n\n  scope.fire('pointerEvents:fired', signalArg)\n\n  if (type === 'tap') {\n    // if pointerEvent should make a double tap, create and fire a doubletap\n    // PointerEvent and use that as the prevTap\n    const prevTap = pointerEvent.double\n      ? fire({\n        interaction,\n        pointer,\n        event,\n        eventTarget,\n        type: 'doubletap',\n      }, scope)\n      : pointerEvent\n\n    interaction.prevTap = prevTap\n    interaction.tapTime = prevTap.timeStamp\n  }\n\n  return pointerEvent\n}\n\nfunction collectEventTargets<T extends string> ({ interaction, pointer, event, eventTarget, type }: {\n  interaction: Interaction\n  pointer: Interact.PointerType | PointerEvent<any>\n  event: Interact.PointerEventType | PointerEvent<any>\n  eventTarget: Interact.EventTarget\n  type: T\n}, scope: Interact.Scope) {\n  const pointerIndex = interaction.getPointerIndex(pointer)\n  const pointerInfo = interaction.pointers[pointerIndex]\n\n  // do not fire a tap event if the pointer was moved before being lifted\n  if (type === 'tap' && (interaction.pointerWasMoved ||\n      // or if the pointerup target is different to the pointerdown target\n      !(pointerInfo && pointerInfo.downTarget === eventTarget))) {\n    return []\n  }\n\n  const path = utils.dom.getPath(eventTarget as Interact.Element | Document)\n  const signalArg = {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    type,\n    path,\n    targets: [] as EventTargetList,\n    node: null,\n  }\n\n  for (const node of path) {\n    signalArg.node = node\n\n    scope.fire('pointerEvents:collect-targets', signalArg)\n  }\n\n  if (type === 'hold') {\n    signalArg.targets = signalArg.targets.filter(target =>\n      target.eventable.options.holdDuration === interaction.pointers[pointerIndex].hold.duration)\n  }\n\n  return signalArg.targets\n}\n\nfunction addInteractionProps ({ interaction }) {\n  interaction.prevTap = null   // the most recent tap event on this interaction\n  interaction.tapTime = 0     // time of the most recent tap event\n}\n\nfunction addHoldInfo ({ down, pointerInfo }: Interact.SignalArgs['interactions:update-pointer']) {\n  if (!down && pointerInfo.hold) {\n    return\n  }\n\n  pointerInfo.hold = { duration: Infinity, timeout: null }\n}\n\nfunction clearHold ({ interaction, pointerIndex }) {\n  if (interaction.pointers[pointerIndex].hold) {\n    clearTimeout(interaction.pointers[pointerIndex].hold.timeout)\n  }\n}\n\nfunction moveAndClearHold (\n  { interaction, pointer, event, eventTarget, duplicate }: Interact.SignalArgs['interactions:move'],\n  scope: Interact.Scope,\n) {\n  const pointerIndex = interaction.getPointerIndex(pointer)\n\n  if (!duplicate && (!interaction.pointerIsDown || interaction.pointerWasMoved)) {\n    if (interaction.pointerIsDown) {\n      clearTimeout(interaction.pointers[pointerIndex].hold.timeout)\n    }\n\n    fire({\n      interaction,\n      pointer,\n      event,\n      eventTarget: eventTarget as Interact.Element,\n      type: 'move',\n    }, scope)\n  }\n}\n\nfunction downAndStartHold ({ interaction, pointer, event, eventTarget, pointerIndex }: Interact.SignalArgs['interactions:down'], scope: Interact.Scope) {\n  const timer = interaction.pointers[pointerIndex].hold\n  const path = utils.dom.getPath(eventTarget as Interact.Element | Document)\n  const signalArg = {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    type: 'hold',\n    targets: [] as EventTargetList,\n    path,\n    node: null,\n  }\n\n  for (const node of path) {\n    signalArg.node = node\n\n    scope.fire('pointerEvents:collect-targets', signalArg)\n  }\n\n  if (!signalArg.targets.length) { return }\n\n  let minDuration = Infinity\n\n  for (const target of signalArg.targets) {\n    const holdDuration = target.eventable.options.holdDuration\n\n    if (holdDuration < minDuration) {\n      minDuration = holdDuration\n    }\n  }\n\n  timer.duration = minDuration\n  timer.timeout = setTimeout(() => {\n    fire({\n      interaction,\n      eventTarget,\n      pointer,\n      event,\n      type: 'hold',\n    }, scope)\n  }, minDuration)\n}\n\nfunction tapAfterUp ({ interaction, pointer, event, eventTarget }: Interact.SignalArgs['interactions:up'], scope: Interact.Scope) {\n  if (!interaction.pointerWasMoved) {\n    fire({ interaction, eventTarget, pointer, event, type: 'tap' }, scope)\n  }\n}\n\nfunction install (scope: Scope) {\n  scope.pointerEvents = pointerEvents\n  scope.defaults.actions.pointerEvents = pointerEvents.defaults\n  utils.extend(scope.actions.phaselessTypes, pointerEvents.types)\n}\n\nexport default pointerEvents\n"
	]
}