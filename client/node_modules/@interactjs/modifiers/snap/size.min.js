import t from"../../utils/extend.min.js";import*as s from"../../utils/is.min.js";import{makeModifier as e}from"../base.min.js";import{snap as o}from"./pointer.min.js";const n={start(t){const{state:s,edges:e}=t,{options:n}=s;if(!e)return null;t.state={options:{targets:null,relativePoints:[{x:e.left?0:1,y:e.top?0:1}],offset:n.offset||"self",origin:{x:0,y:0},range:n.range}},s.targetFields=s.targetFields||[["width","height"],["x","y"]],o.start(t),s.offsets=t.state.offsets,t.state=s},set(e){const{interaction:n,state:i,coords:r}=e,{options:f,offsets:a}=i,l={x:r.x-a[0].x,y:r.y-a[0].y};i.options=t({},f),i.options.targets=[];for(const t of f.targets||[]){let e;if(e=s.func(t)?t(l.x,l.y,n):t,e){for(const[t,s]of i.targetFields)if(t in e||s in e){e.x=e[t],e.y=e[s];break}i.options.targets.push(e)}}const p=o.set(e);return i.options=f,p},defaults:{range:1/0,targets:null,offset:null,endOnly:!1,enabled:!1}};export default e(n,"snapSize");export{n as snapSize};
//# sourceMappingURL=size.min.js.map