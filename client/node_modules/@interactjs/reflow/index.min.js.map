{
	"version": 3,
	"sources": [
		"index.ts"
	],
	"names": [
		"Interactable",
		"Interaction",
		"arr",
		"extend",
		"is",
		"pointerUtils",
		"rectUtils",
		"win",
		"install",
		"scope",
		"actions",
		"phases",
		"reflow",
		"prototype",
		"action",
		"interactable",
		"elements",
		"string",
		"target",
		"from",
		"_context",
		"querySelectorAll",
		"Promise",
		"window",
		"promises",
		"element",
		"rect",
		"getRect",
		"runningInteraction",
		"find",
		"interactions",
		"list",
		"interaction",
		"interacting",
		"prepared",
		"name",
		"reflowPromise",
		"move",
		"_reflowPromise",
		"resolve",
		"_reflowResolve",
		"xywh",
		"tlbrToXywh",
		"coords",
		"page",
		"x",
		"y",
		"client",
		"timeStamp",
		"now",
		"event",
		"coordsToEvent",
		"startReflow",
		"push",
		"all",
		"then",
		"this",
		"new",
		"pointerType",
		"signalArg",
		"pointer",
		"eventTarget",
		"phase",
		"prevEvent",
		"updatePointer",
		"_doPhase",
		"start",
		"_interacting",
		"end",
		"stop",
		"removePointer",
		"pointerIsDown",
		"id",
		"listeners",
		"[object Object]",
		"remove"
	],
	"mappings": "OAAOA,MAAkB,oDACHC,MAAmB,2CAEhCC,YAAKC,QAAQC,aAAeC,UAAsBC,SAAWC,MAAW,+BAsB1E,SAASC,QAASC,GACvB,MAAMT,aAGJA,GACES,EAEJA,EAAMC,QAAQC,OAAOC,QAAS,EAkB9BZ,EAAaa,UAAUD,OAAS,SAAUE,GACxC,OAIJ,SAAgDC,EAA4BD,EAAwBL,GAClG,MAAMO,EAAYZ,EAAGa,OAAOF,EAAaG,QACrChB,EAAIiB,KAAKJ,EAAaK,SAASC,iBAAiBN,EAAaG,SAC7D,CAACH,EAAaG,QAGZI,EAAWf,EAAIgB,OAAeD,QAC9BE,EAAwCF,EAAU,GAAK,KAE7D,IAAK,MAAMG,KAAWT,EAAU,CAC9B,MAAMU,EAAOX,EAAaY,QAAQF,GAElC,IAAKC,EAAQ,MAEb,MAAME,EAAqB1B,EAAI2B,KAC7BpB,EAAMqB,aAAaC,KAClBC,GACQA,EAAYC,eACjBD,EAAYjB,eAAiBA,GAC7BiB,EAAYP,UAAYA,GACxBO,EAAYE,SAASC,OAASrB,EAAOqB,MAE3C,IAAIC,EAEJ,GAAIR,EACFA,EAAmBS,OAEfb,IACFY,EAAgBR,EAAmBU,gBAAkB,IAAIhB,EAASiB,IAChEX,EAAmBY,eAAiBD,SAIrC,CACH,MAAME,EAAOnC,EAAUoC,WAAWhB,GAC5BiB,EAAS,CACbC,KAAW,CAAEC,EAAGJ,EAAKI,EAAGC,EAAGL,EAAKK,GAChCC,OAAW,CAAEF,EAAGJ,EAAKI,EAAGC,EAAGL,EAAKK,GAChCE,UAAWvC,EAAMwC,OAGbC,EAAQ7C,EAAa8C,cAAcR,GACzCP,EAAgBgB,EAAe3C,EAAOM,EAAcU,EAASX,EAAQoC,GAGnE1B,GACFA,EAAS6B,KAAKjB,GAIlB,OAAOZ,GAAYF,EAAQgC,IAAI9B,GAAU+B,KAAK,IAAMxC,GAtD3CH,CAAO4C,KAAM1C,EAAQL,IAyDhC,SAAS2C,EAA4C3C,EAAcM,EAA4BU,EAA2BX,EAAwBoC,GAChJ,MAAMlB,EAAcvB,EAAMqB,aAAa2B,IAAI,CAAEC,YAAa,WACpDC,EAAY,CAChB3B,YAAAA,EACAkB,MAAAA,EACAU,QAASV,EACTW,YAAapC,EACbqC,MAAO,UAGT9B,EAAYjB,aAAeA,EAC3BiB,EAAYP,QAAUA,EACtBO,EAAYE,SAAW/B,EAAO,GAAIW,GAClCkB,EAAY+B,UAAYb,EACxBlB,EAAYgC,cAAcd,EAAOA,EAAOzB,GAAS,GAEjDO,EAAYiC,SAASN,GAErB,MAAMvB,EAAiB7B,EAAIgB,OAA0BD,QACjD,IAAKf,EAAIgB,OAA0BD,QAASiB,IAC5CP,EAAYQ,eAAiBD,IAE7B,KAgBJ,OAdAP,EAAYM,eAAiBF,EAC7BJ,EAAYkC,MAAMpD,EAAQC,EAAcU,GAEpCO,EAAYmC,cACdnC,EAAYK,KAAKsB,GACjB3B,EAAYoC,IAAIlB,IAGhBlB,EAAYqC,OAGdrC,EAAYsC,cAAcpB,EAAOA,GACjClB,EAAYuC,eAAgB,EAErBnC,gBAGM,CACboC,GAAI,SACJhE,QAAAA,QACAiE,UAAW,CAETC,qBAAwB1C,YAAAA,GAAevB,GACL,WAA5BuB,EAAY0B,cACV1B,EAAYQ,gBACdR,EAAYQ,iBAGdtC,EAAIyE,OAAOlE,EAAMqB,aAAaC,KAAMC",
	"sourcesContent": [
		"import Interactable from '@interactjs/core/Interactable'\nimport { ActionProps, Interaction } from '@interactjs/core/Interaction'\nimport Scope from '@interactjs/core/scope'\nimport { arr, extend, is, pointer as pointerUtils, rect as rectUtils, win } from '@interactjs/utils/index'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    reflow: (action: ActionProps) => ReturnType<typeof reflow>\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    _reflowPromise: Promise<void>\n    _reflowResolve: () => void\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  // eslint-disable-next-line no-shadow\n  interface PhaseMap {\n    reflow?: true\n  }\n}\n\nexport function install (scope: Scope) {\n  const {\n    /** @lends Interactable */\n    // eslint-disable-next-line no-shadow\n    Interactable,\n  } = scope\n\n  scope.actions.phases.reflow = true\n\n  /**\n   * ```js\n   * const interactable = interact(target)\n   * const drag = { name: drag, axis: 'x' }\n   * const resize = { name: resize, edges: { left: true, bottom: true }\n   *\n   * interactable.reflow(drag)\n   * interactable.reflow(resize)\n   * ```\n   *\n   * Start an action sequence to re-apply modifiers, check drops, etc.\n   *\n   * @param { Object } action The action to begin\n   * @param { string } action.name The name of the action\n   * @returns { Promise } A promise that resolves to the `Interactable` when actions on all targets have ended\n   */\n  Interactable.prototype.reflow = function (action) {\n    return reflow(this, action, scope)\n  }\n}\n\nfunction reflow<T extends Interact.ActionName> (interactable: Interactable, action: ActionProps<T>, scope: Scope): Promise<Interactable> {\n  const elements = (is.string(interactable.target)\n    ? arr.from(interactable._context.querySelectorAll(interactable.target))\n    : [interactable.target]) as Interact.Element[]\n\n  // tslint:disable-next-line variable-name\n  const Promise = (win.window as any).Promise\n  const promises: Array<Promise<null>> | null = Promise ? [] : null\n\n  for (const element of elements) {\n    const rect = interactable.getRect(element as HTMLElement | SVGElement)\n\n    if (!rect) { break }\n\n    const runningInteraction = arr.find(\n      scope.interactions.list,\n      (interaction: Interaction) => {\n        return interaction.interacting() &&\n          interaction.interactable === interactable &&\n          interaction.element === element &&\n          interaction.prepared.name === action.name\n      })\n    let reflowPromise: Promise<null>\n\n    if (runningInteraction) {\n      runningInteraction.move()\n\n      if (promises) {\n        reflowPromise = runningInteraction._reflowPromise || new Promise((resolve: any) => {\n          runningInteraction._reflowResolve = resolve\n        })\n      }\n    }\n    else {\n      const xywh = rectUtils.tlbrToXywh(rect)\n      const coords = {\n        page     : { x: xywh.x, y: xywh.y },\n        client   : { x: xywh.x, y: xywh.y },\n        timeStamp: scope.now(),\n      }\n\n      const event = pointerUtils.coordsToEvent(coords)\n      reflowPromise = startReflow<T>(scope, interactable, element, action, event)\n    }\n\n    if (promises) {\n      promises.push(reflowPromise)\n    }\n  }\n\n  return promises && Promise.all(promises).then(() => interactable)\n}\n\nfunction startReflow<T extends Interact.ActionName> (scope: Scope, interactable: Interactable, element: Interact.Element, action: ActionProps<T>, event: any) {\n  const interaction = scope.interactions.new({ pointerType: 'reflow' })\n  const signalArg = {\n    interaction,\n    event,\n    pointer: event,\n    eventTarget: element,\n    phase: 'reflow',\n  } as const\n\n  interaction.interactable = interactable\n  interaction.element = element\n  interaction.prepared = extend({}, action)\n  interaction.prevEvent = event\n  interaction.updatePointer(event, event, element, true)\n\n  interaction._doPhase(signalArg)\n\n  const reflowPromise = (win.window as unknown as any).Promise\n    ? new (win.window as unknown as any).Promise((resolve: any) => {\n      interaction._reflowResolve = resolve\n    })\n    : null\n\n  interaction._reflowPromise = reflowPromise\n  interaction.start(action, interactable, element)\n\n  if (interaction._interacting) {\n    interaction.move(signalArg)\n    interaction.end(event)\n  }\n  else {\n    interaction.stop()\n  }\n\n  interaction.removePointer(event, event)\n  interaction.pointerIsDown = false\n\n  return reflowPromise\n}\n\nexport default {\n  id: 'reflow',\n  install,\n  listeners: {\n    // remove completed reflow interactions\n    'interactions:stop': ({ interaction }, scope) => {\n      if (interaction.pointerType === 'reflow') {\n        if (interaction._reflowResolve) {\n          interaction._reflowResolve()\n        }\n\n        arr.remove(scope.interactions.list, interaction)\n      }\n    },\n  },\n} as Interact.Plugin\n"
	]
}