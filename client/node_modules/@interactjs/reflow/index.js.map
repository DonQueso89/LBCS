{
	"version": 3,
	"sources": [
		"index.ts"
	],
	"names": [
		"Interactable",
		"Interaction",
		"arr",
		"extend",
		"is",
		"pointer",
		"pointerUtils",
		"rect",
		"rectUtils",
		"win",
		"install",
		"scope",
		"actions",
		"phases",
		"reflow",
		"prototype",
		"action",
		"interactable",
		"elements",
		"string",
		"target",
		"from",
		"_context",
		"querySelectorAll",
		"Promise",
		"window",
		"promises",
		"element",
		"getRect",
		"runningInteraction",
		"find",
		"interactions",
		"list",
		"interaction",
		"interacting",
		"prepared",
		"name",
		"reflowPromise",
		"move",
		"_reflowPromise",
		"resolve",
		"_reflowResolve",
		"xywh",
		"tlbrToXywh",
		"coords",
		"page",
		"x",
		"y",
		"client",
		"timeStamp",
		"now",
		"event",
		"coordsToEvent",
		"startReflow",
		"push",
		"all",
		"then",
		"new",
		"pointerType",
		"signalArg",
		"eventTarget",
		"phase",
		"prevEvent",
		"updatePointer",
		"_doPhase",
		"start",
		"_interacting",
		"end",
		"stop",
		"removePointer",
		"pointerIsDown",
		"id",
		"listeners",
		"remove"
	],
	"mappings": "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",
	"sourcesContent": [
		"import Interactable from '@interactjs/core/Interactable'\nimport { ActionProps, Interaction } from '@interactjs/core/Interaction'\nimport Scope from '@interactjs/core/scope'\nimport { arr, extend, is, pointer as pointerUtils, rect as rectUtils, win } from '@interactjs/utils/index'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    reflow: (action: ActionProps) => ReturnType<typeof reflow>\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    _reflowPromise: Promise<void>\n    _reflowResolve: () => void\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  // eslint-disable-next-line no-shadow\n  interface PhaseMap {\n    reflow?: true\n  }\n}\n\nexport function install (scope: Scope) {\n  const {\n    /** @lends Interactable */\n    // eslint-disable-next-line no-shadow\n    Interactable,\n  } = scope\n\n  scope.actions.phases.reflow = true\n\n  /**\n   * ```js\n   * const interactable = interact(target)\n   * const drag = { name: drag, axis: 'x' }\n   * const resize = { name: resize, edges: { left: true, bottom: true }\n   *\n   * interactable.reflow(drag)\n   * interactable.reflow(resize)\n   * ```\n   *\n   * Start an action sequence to re-apply modifiers, check drops, etc.\n   *\n   * @param { Object } action The action to begin\n   * @param { string } action.name The name of the action\n   * @returns { Promise } A promise that resolves to the `Interactable` when actions on all targets have ended\n   */\n  Interactable.prototype.reflow = function (action) {\n    return reflow(this, action, scope)\n  }\n}\n\nfunction reflow<T extends Interact.ActionName> (interactable: Interactable, action: ActionProps<T>, scope: Scope): Promise<Interactable> {\n  const elements = (is.string(interactable.target)\n    ? arr.from(interactable._context.querySelectorAll(interactable.target))\n    : [interactable.target]) as Interact.Element[]\n\n  // tslint:disable-next-line variable-name\n  const Promise = (win.window as any).Promise\n  const promises: Array<Promise<null>> | null = Promise ? [] : null\n\n  for (const element of elements) {\n    const rect = interactable.getRect(element as HTMLElement | SVGElement)\n\n    if (!rect) { break }\n\n    const runningInteraction = arr.find(\n      scope.interactions.list,\n      (interaction: Interaction) => {\n        return interaction.interacting() &&\n          interaction.interactable === interactable &&\n          interaction.element === element &&\n          interaction.prepared.name === action.name\n      })\n    let reflowPromise: Promise<null>\n\n    if (runningInteraction) {\n      runningInteraction.move()\n\n      if (promises) {\n        reflowPromise = runningInteraction._reflowPromise || new Promise((resolve: any) => {\n          runningInteraction._reflowResolve = resolve\n        })\n      }\n    }\n    else {\n      const xywh = rectUtils.tlbrToXywh(rect)\n      const coords = {\n        page     : { x: xywh.x, y: xywh.y },\n        client   : { x: xywh.x, y: xywh.y },\n        timeStamp: scope.now(),\n      }\n\n      const event = pointerUtils.coordsToEvent(coords)\n      reflowPromise = startReflow<T>(scope, interactable, element, action, event)\n    }\n\n    if (promises) {\n      promises.push(reflowPromise)\n    }\n  }\n\n  return promises && Promise.all(promises).then(() => interactable)\n}\n\nfunction startReflow<T extends Interact.ActionName> (scope: Scope, interactable: Interactable, element: Interact.Element, action: ActionProps<T>, event: any) {\n  const interaction = scope.interactions.new({ pointerType: 'reflow' })\n  const signalArg = {\n    interaction,\n    event,\n    pointer: event,\n    eventTarget: element,\n    phase: 'reflow',\n  } as const\n\n  interaction.interactable = interactable\n  interaction.element = element\n  interaction.prepared = extend({}, action)\n  interaction.prevEvent = event\n  interaction.updatePointer(event, event, element, true)\n\n  interaction._doPhase(signalArg)\n\n  const reflowPromise = (win.window as unknown as any).Promise\n    ? new (win.window as unknown as any).Promise((resolve: any) => {\n      interaction._reflowResolve = resolve\n    })\n    : null\n\n  interaction._reflowPromise = reflowPromise\n  interaction.start(action, interactable, element)\n\n  if (interaction._interacting) {\n    interaction.move(signalArg)\n    interaction.end(event)\n  }\n  else {\n    interaction.stop()\n  }\n\n  interaction.removePointer(event, event)\n  interaction.pointerIsDown = false\n\n  return reflowPromise\n}\n\nexport default {\n  id: 'reflow',\n  install,\n  listeners: {\n    // remove completed reflow interactions\n    'interactions:stop': ({ interaction }, scope) => {\n      if (interaction.pointerType === 'reflow') {\n        if (interaction._reflowResolve) {\n          interaction._reflowResolve()\n        }\n\n        arr.remove(scope.interactions.list, interaction)\n      }\n    },\n  },\n} as Interact.Plugin\n"
	]
}