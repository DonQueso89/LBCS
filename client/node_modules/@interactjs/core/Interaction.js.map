{
	"version": 3,
	"sources": [
		"Interaction.ts"
	],
	"names": [
		"utils",
		"InteractEvent",
		"PointerInfo",
		"_ProxyValues",
		"_ProxyMethods",
		"idCounter",
		"Interaction",
		"pointerMoveTolerance",
		"constructor",
		"pointerType",
		"scopeFire",
		"interactable",
		"element",
		"rect",
		"_rects",
		"edges",
		"_scopeFire",
		"prepared",
		"name",
		"axis",
		"pointers",
		"downEvent",
		"downPointer",
		"_latestPointer",
		"pointer",
		"event",
		"eventTarget",
		"prevEvent",
		"pointerIsDown",
		"pointerWasMoved",
		"_interacting",
		"_ending",
		"_stopped",
		"_proxy",
		"simulation",
		"doMove",
		"warnOnce",
		"signalArg",
		"move",
		"coords",
		"start",
		"newCoords",
		"prev",
		"cur",
		"delta",
		"velocity",
		"_id",
		"that",
		"key",
		"Object",
		"defineProperty",
		"get",
		"value",
		"args",
		"interaction",
		"pointerDown",
		"pointerIndex",
		"updatePointer",
		"pointerInfo",
		"type",
		"action",
		"interacting",
		"length",
		"options",
		"enabled",
		"copyAction",
		"getRect",
		"extend",
		"left",
		"right",
		"top",
		"bottom",
		"_doPhase",
		"phase",
		"pointerMove",
		"modification",
		"endResult",
		"duplicateMove",
		"page",
		"x",
		"y",
		"client",
		"dx",
		"dy",
		"hypot",
		"getPointerIndex",
		"duplicate",
		"setCoordVelocity",
		"copyCoords",
		"setZeroCoords",
		"pointerUp",
		"curEventTarget",
		"test",
		"end",
		"removePointer",
		"documentBlur",
		"endPhaseResult",
		"stop",
		"currentAction",
		"pointerId",
		"getPointerId",
		"arr",
		"findIndex",
		"curPointer",
		"id",
		"getPointerInfo",
		"down",
		"push",
		"setCoords",
		"map",
		"p",
		"_now",
		"setCoordDeltas",
		"downTime",
		"timeStamp",
		"downTarget",
		"pointerExtend",
		"_updateLatestPointer",
		"splice",
		"destroy",
		"_createPreparedEvent",
		"preEnd",
		"_fireEvent",
		"iEvent",
		"fire",
		"addEdges",
		"deltaSource",
		"width",
		"height",
		"beforeResult",
		"Date",
		"now"
	],
	"mappings": "AAAA,OAAO,KAAKA,KAAZ,MAAuB,mBAAvB;AACA,OAAOC,aAAP,MAA0C,oBAA1C;AAEA,OAAOC,WAAP,MAAwB,kBAAxB;AAaA,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AASZ,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAuEZ,IAAIC,SAAS,GAAG,CAAhB;AAEA,OAAO,MAAMC,WAAN,CAAqD;AAC1D;AAGA;AAaA;AASA;AAGA;AAeA;AAYA,MAAIC,oBAAJ,GAA4B;AAC1B,WAAO,CAAP;AACD;AAED;;;;;AAwBA;AACAC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAF,EAGR;AAAA,SAtFHC,YAsFG,GAtF0B,IAsF1B;AAAA,SAnFHC,OAmFG,GAnFyB,IAmFzB;AAAA,SAlFHC,IAkFG;AAAA,SAjFHC,MAiFG;AAAA,SA3EHC,KA2EG;AAAA,SAzEHC,UAyEG;AAAA,SAtEHC,QAsEG,GAtEwB;AACzBC,MAAAA,IAAI,EAAG,IADkB;AAEzBC,MAAAA,IAAI,EAAG,IAFkB;AAGzBJ,MAAAA,KAAK,EAAE;AAHkB,KAsExB;AAAA,SAhEHN,WAgEG;AAAA,SA7DHW,QA6DG,GA7DuB,EA6DvB;AAAA,SA1DHC,SA0DG,GA1DoC,IA0DpC;AAAA,SAxDHC,WAwDG,GAxDiC,EAwDjC;AAAA,SAtDHC,cAsDG,GAlDC;AACFC,MAAAA,OAAO,EAAE,IADP;AAEFC,MAAAA,KAAK,EAAE,IAFL;AAGFC,MAAAA,WAAW,EAAE;AAHX,KAkDD;AAAA,SA3CHC,SA2CG,GA3CuC,IA2CvC;AAAA,SAzCHC,aAyCG,GAzCa,KAyCb;AAAA,SAxCHC,eAwCG,GAxCe,KAwCf;AAAA,SAvCHC,YAuCG,GAvCY,KAuCZ;AAAA,SAtCHC,OAsCG,GAtCO,KAsCP;AAAA,SArCHC,QAqCG,GArCQ,IAqCR;AAAA,SApCHC,MAoCG,GApC2B,IAoC3B;AAAA,SAlCHC,UAkCG,GAlCU,IAkCV;AAAA,SAzBHC,MAyBG,GAzBMnC,KAAK,CAACoC,QAAN,CACP,UAA6BC,SAA7B,EAA6C;AAC3C,WAAKC,IAAL,CAAUD,SAAV;AACD,KAHM,EAIP,wEAJO,CAyBN;AAAA,SAnBHE,MAmBG,GAnB0B;AAC3B;AACAC,MAAAA,KAAK,EAAExC,KAAK,CAACwB,OAAN,CAAciB,SAAd,EAFoB;AAG3B;AACAC,MAAAA,IAAI,EAAE1C,KAAK,CAACwB,OAAN,CAAciB,SAAd,EAJqB;AAK3B;AACAE,MAAAA,GAAG,EAAE3C,KAAK,CAACwB,OAAN,CAAciB,SAAd,EANsB;AAO3B;AACAG,MAAAA,KAAK,EAAE5C,KAAK,CAACwB,OAAN,CAAciB,SAAd,EARoB;AAS3B;AACAI,MAAAA,QAAQ,EAAE7C,KAAK,CAACwB,OAAN,CAAciB,SAAd;AAViB,KAmB1B;AAAA,SANMK,GAMN,GANoBzC,SAAS,EAM7B;AACD,SAAKW,UAAL,GAAkBN,SAAlB;AACA,SAAKD,WAAL,GAAmBA,WAAnB;AAEA,UAAMsC,IAAI,GAAG,IAAb;AAEA,SAAKd,MAAL,GAAc,EAAd;;AAEA,SAAK,MAAMe,GAAX,IAAkB7C,YAAlB,EAAgC;AAC9B8C,MAAAA,MAAM,CAACC,cAAP,CAAsB,KAAKjB,MAA3B,EAAmCe,GAAnC,EAAwC;AACtCG,QAAAA,GAAG,GAAI;AAAE,iBAAOJ,IAAI,CAACC,GAAD,CAAX;AAAkB;;AADW,OAAxC;AAGD;;AAED,SAAK,MAAMA,GAAX,IAAkB5C,aAAlB,EAAiC;AAC/B6C,MAAAA,MAAM,CAACC,cAAP,CAAsB,KAAKjB,MAA3B,EAAmCe,GAAnC,EAAwC;AACtCI,QAAAA,KAAK,EAAE,CAAC,GAAGC,IAAJ,KAAaN,IAAI,CAACC,GAAD,CAAJ,CAAU,GAAGK,IAAb;AADkB,OAAxC;AAGD;;AAED,SAAKrC,UAAL,CAAgB,kBAAhB,EAAoC;AAAEsC,MAAAA,WAAW,EAAE;AAAf,KAApC;AACD;;AAEDC,EAAAA,WAAW,CAAE/B,OAAF,EAAiCC,KAAjC,EAAmEC,WAAnE,EAAsG;AAC/G,UAAM8B,YAAY,GAAG,KAAKC,aAAL,CAAmBjC,OAAnB,EAA4BC,KAA5B,EAAmCC,WAAnC,EAAgD,IAAhD,CAArB;AACA,UAAMgC,WAAW,GAAG,KAAKtC,QAAL,CAAcoC,YAAd,CAApB;;AAEA,SAAKxC,UAAL,CAAgB,mBAAhB,EAAqC;AACnCQ,MAAAA,OADmC;AAEnCC,MAAAA,KAFmC;AAGnCC,MAAAA,WAHmC;AAInC8B,MAAAA,YAJmC;AAKnCE,MAAAA,WALmC;AAMnCC,MAAAA,IAAI,EAAE,MAN6B;AAOnCL,MAAAA,WAAW,EAAE;AAPsB,KAArC;AASD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BAd,EAAAA,KAAK,CAAEoB,MAAF,EAAuBjD,YAAvB,EAAmDC,OAAnD,EAA8E;AACjF,QAAI,KAAKiD,WAAL,MACA,CAAC,KAAKjC,aADN,IAEA,KAAKR,QAAL,CAAc0C,MAAd,IAAwBF,MAAM,CAAC1C,IAAP,KAAgB,SAAhB,GAA4B,CAA5B,GAAgC,CAAxD,CAFA,IAGA,CAACP,YAAY,CAACoD,OAAb,CAAqBH,MAAM,CAAC1C,IAA5B,EAAkC8C,OAHvC,EAGgD;AAC9C,aAAO,KAAP;AACD;;AAEDhE,IAAAA,KAAK,CAACiE,UAAN,CAAiB,KAAKhD,QAAtB,EAAgC2C,MAAhC;AAEA,SAAKjD,YAAL,GAAoBA,YAApB;AACA,SAAKC,OAAL,GAAoBA,OAApB;AACA,SAAKC,IAAL,GAAoBF,YAAY,CAACuD,OAAb,CAAqBtD,OAArB,CAApB;AACA,SAAKG,KAAL,GAAoB,KAAKE,QAAL,CAAcF,KAAd,GAChBf,KAAK,CAACmE,MAAN,CAAa,EAAb,EAAiB,KAAKlD,QAAL,CAAcF,KAA/B,CADgB,GAEhB;AAAEqD,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE,IAArB;AAA2BC,MAAAA,GAAG,EAAE,IAAhC;AAAsCC,MAAAA,MAAM,EAAE;AAA9C,KAFJ;AAGA,SAAKvC,QAAL,GAAoB,KAApB;AACA,SAAKF,YAAL,GAAoB,KAAK0C,QAAL,CAAc;AAChClB,MAAAA,WAAW,EAAE,IADmB;AAEhC7B,MAAAA,KAAK,EAAE,KAAKJ,SAFoB;AAGhCoD,MAAAA,KAAK,EAAE;AAHyB,KAAd,KAId,CAAC,KAAKzC,QAJZ;AAMA,WAAO,KAAKF,YAAZ;AACD;;AAED4C,EAAAA,WAAW,CAAElD,OAAF,EAAiCC,KAAjC,EAAmEC,WAAnE,EAAsG;AAC/G,QAAI,CAAC,KAAKQ,UAAN,IAAoB,EAAE,KAAKyC,YAAL,IAAqB,KAAKA,YAAL,CAAkBC,SAAzC,CAAxB,EAA6E;AAC3E,WAAKnB,aAAL,CAAmBjC,OAAnB,EAA4BC,KAA5B,EAAmCC,WAAnC,EAAgD,KAAhD;AACD;;AAED,UAAMmD,aAAa,GAAI,KAAKtC,MAAL,CAAYI,GAAZ,CAAgBmC,IAAhB,CAAqBC,CAArB,KAA2B,KAAKxC,MAAL,CAAYG,IAAZ,CAAiBoC,IAAjB,CAAsBC,CAAjD,IACA,KAAKxC,MAAL,CAAYI,GAAZ,CAAgBmC,IAAhB,CAAqBE,CAArB,KAA2B,KAAKzC,MAAL,CAAYG,IAAZ,CAAiBoC,IAAjB,CAAsBE,CADjD,IAEA,KAAKzC,MAAL,CAAYI,GAAZ,CAAgBsC,MAAhB,CAAuBF,CAAvB,KAA6B,KAAKxC,MAAL,CAAYG,IAAZ,CAAiBuC,MAAjB,CAAwBF,CAFrD,IAGA,KAAKxC,MAAL,CAAYI,GAAZ,CAAgBsC,MAAhB,CAAuBD,CAAvB,KAA6B,KAAKzC,MAAL,CAAYG,IAAZ,CAAiBuC,MAAjB,CAAwBD,CAH5E;AAKA,QAAIE,EAAJ;AACA,QAAIC,EAAJ,CAX+G,CAa/G;;AACA,QAAI,KAAKvD,aAAL,IAAsB,CAAC,KAAKC,eAAhC,EAAiD;AAC/CqD,MAAAA,EAAE,GAAG,KAAK3C,MAAL,CAAYI,GAAZ,CAAgBsC,MAAhB,CAAuBF,CAAvB,GAA2B,KAAKxC,MAAL,CAAYC,KAAZ,CAAkByC,MAAlB,CAAyBF,CAAzD;AACAI,MAAAA,EAAE,GAAG,KAAK5C,MAAL,CAAYI,GAAZ,CAAgBsC,MAAhB,CAAuBD,CAAvB,GAA2B,KAAKzC,MAAL,CAAYC,KAAZ,CAAkByC,MAAlB,CAAyBD,CAAzD;AAEA,WAAKnD,eAAL,GAAuB7B,KAAK,CAACoF,KAAN,CAAYF,EAAZ,EAAgBC,EAAhB,IAAsB,KAAK5E,oBAAlD;AACD;;AAED,UAAMiD,YAAY,GAAG,KAAK6B,eAAL,CAAqB7D,OAArB,CAArB;AACA,UAAMa,SAAS,GAAG;AAChBb,MAAAA,OADgB;AAEhBgC,MAAAA,YAFgB;AAGhBE,MAAAA,WAAW,EAAE,KAAKtC,QAAL,CAAcoC,YAAd,CAHG;AAIhB/B,MAAAA,KAJgB;AAKhBkC,MAAAA,IAAI,EAAE,MALU;AAMhBjC,MAAAA,WANgB;AAOhBwD,MAAAA,EAPgB;AAQhBC,MAAAA,EARgB;AAShBG,MAAAA,SAAS,EAAET,aATK;AAUhBvB,MAAAA,WAAW,EAAE;AAVG,KAAlB;;AAaA,QAAI,CAACuB,aAAL,EAAoB;AAClB;AACA7E,MAAAA,KAAK,CAACwB,OAAN,CAAc+D,gBAAd,CAA+B,KAAKhD,MAAL,CAAYM,QAA3C,EAAqD,KAAKN,MAAL,CAAYK,KAAjE;AACD;;AAED,SAAK5B,UAAL,CAAgB,mBAAhB,EAAqCqB,SAArC;;AAEA,QAAI,CAACwC,aAAD,IAAkB,CAAC,KAAK3C,UAA5B,EAAwC;AACtC;AACA,UAAI,KAAK2B,WAAL,EAAJ,EAAwB;AACtBxB,QAAAA,SAAS,CAACsB,IAAV,GAAiB,IAAjB;AACA,aAAKrB,IAAL,CAAUD,SAAV;AACD;;AAED,UAAI,KAAKR,eAAT,EAA0B;AACxB7B,QAAAA,KAAK,CAACwB,OAAN,CAAcgE,UAAd,CAAyB,KAAKjD,MAAL,CAAYG,IAArC,EAA2C,KAAKH,MAAL,CAAYI,GAAvD;AACD;AACF;AACF;AAED;;;;;;;;;;;;;;;;;;;;AAkBAL,EAAAA,IAAI,CAAED,SAAF,EAAc;AAChB,QAAI,CAACA,SAAD,IAAc,CAACA,SAAS,CAACZ,KAA7B,EAAoC;AAClCzB,MAAAA,KAAK,CAACwB,OAAN,CAAciE,aAAd,CAA4B,KAAKlD,MAAL,CAAYK,KAAxC;AACD;;AAEDP,IAAAA,SAAS,GAAGrC,KAAK,CAACmE,MAAN,CAAa;AACvB3C,MAAAA,OAAO,EAAE,KAAKD,cAAL,CAAoBC,OADN;AAEvBC,MAAAA,KAAK,EAAE,KAAKF,cAAL,CAAoBE,KAFJ;AAGvBC,MAAAA,WAAW,EAAE,KAAKH,cAAL,CAAoBG,WAHV;AAIvB4B,MAAAA,WAAW,EAAE;AAJU,KAAb,EAKTjB,SAAS,IAAI,EALJ,CAAZ;AAOAA,IAAAA,SAAS,CAACoC,KAAV,GAAkB,MAAlB;;AAEA,SAAKD,QAAL,CAAcnC,SAAd;AACD,GA/QyD,CAiR1D;;;AACAqD,EAAAA,SAAS,CAAElE,OAAF,EAAiCC,KAAjC,EAAmEC,WAAnE,EAAsGiE,cAAtG,EAA4I;AACnJ,QAAInC,YAAY,GAAG,KAAK6B,eAAL,CAAqB7D,OAArB,CAAnB;;AAEA,QAAIgC,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBA,MAAAA,YAAY,GAAG,KAAKC,aAAL,CAAmBjC,OAAnB,EAA4BC,KAA5B,EAAmCC,WAAnC,EAAgD,KAAhD,CAAf;AACD;;AAED,UAAMiC,IAAI,GAAG,WAAWiC,IAAX,CAAgBnE,KAAK,CAACkC,IAAtB,IAA8B,QAA9B,GAAyC,IAAtD;;AAEA,SAAK3C,UAAL,CAAiB,gBAAe2C,IAAK,EAArC,EAAqF;AACnFnC,MAAAA,OADmF;AAEnFgC,MAAAA,YAFmF;AAGnFE,MAAAA,WAAW,EAAE,KAAKtC,QAAL,CAAcoC,YAAd,CAHsE;AAInF/B,MAAAA,KAJmF;AAKnFC,MAAAA,WALmF;AAMnFiC,MAAAA,IAAI,EAAEA,IAN6E;AAOnFgC,MAAAA,cAPmF;AAQnFrC,MAAAA,WAAW,EAAE;AARsE,KAArF;;AAWA,QAAI,CAAC,KAAKpB,UAAV,EAAsB;AACpB,WAAK2D,GAAL,CAASpE,KAAT;AACD;;AAED,SAAKG,aAAL,GAAqB,KAArB;AACA,SAAKkE,aAAL,CAAmBtE,OAAnB,EAA4BC,KAA5B;AACD;;AAEDsE,EAAAA,YAAY,CAAEtE,KAAF,EAAS;AACnB,SAAKoE,GAAL,CAASpE,KAAT;;AACA,SAAKT,UAAL,CAAgB,mBAAhB,EAAqC;AAAES,MAAAA,KAAF;AAASkC,MAAAA,IAAI,EAAE,MAAf;AAAuBL,MAAAA,WAAW,EAAE;AAApC,KAArC;AACD;AAED;;;;;;;;;;;;;;;;;;AAgBAuC,EAAAA,GAAG,CAAEpE,KAAF,EAAqC;AACtC,SAAKM,OAAL,GAAe,IAAf;AACAN,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKF,cAAL,CAAoBE,KAArC;AACA,QAAIuE,cAAJ;;AAEA,QAAI,KAAKnC,WAAL,EAAJ,EAAwB;AACtBmC,MAAAA,cAAc,GAAG,KAAKxB,QAAL,CAAc;AAC7B/C,QAAAA,KAD6B;AAE7B6B,QAAAA,WAAW,EAAE,IAFgB;AAG7BmB,QAAAA,KAAK,EAAE;AAHsB,OAAd,CAAjB;AAKD;;AAED,SAAK1C,OAAL,GAAe,KAAf;;AAEA,QAAIiE,cAAc,KAAK,IAAvB,EAA6B;AAC3B,WAAKC,IAAL;AACD;AACF;;AAEDC,EAAAA,aAAa,GAAI;AACf,WAAO,KAAKpE,YAAL,GAAoB,KAAKb,QAAL,CAAcC,IAAlC,GAAyC,IAAhD;AACD;;AAED2C,EAAAA,WAAW,GAAI;AACb,WAAO,KAAK/B,YAAZ;AACD;AAED;;;AACAmE,EAAAA,IAAI,GAAI;AACN,SAAKjF,UAAL,CAAgB,mBAAhB,EAAqC;AAAEsC,MAAAA,WAAW,EAAE;AAAf,KAArC;;AAEA,SAAK3C,YAAL,GAAoB,KAAKC,OAAL,GAAe,IAAnC;AAEA,SAAKkB,YAAL,GAAoB,KAApB;AACA,SAAKE,QAAL,GAAgB,IAAhB;AACA,SAAKf,QAAL,CAAcC,IAAd,GAAqB,KAAKS,SAAL,GAAiB,IAAtC;AACD;;AAED0D,EAAAA,eAAe,CAAE7D,OAAF,EAAW;AACxB,UAAM2E,SAAS,GAAGnG,KAAK,CAACwB,OAAN,CAAc4E,YAAd,CAA2B5E,OAA3B,CAAlB,CADwB,CAGxB;;AACA,WAAQ,KAAKf,WAAL,KAAqB,OAArB,IAAgC,KAAKA,WAAL,KAAqB,KAAtD,GACH,KAAKW,QAAL,CAAc0C,MAAd,GAAuB,CADpB,GAEH9D,KAAK,CAACqG,GAAN,CAAUC,SAAV,CAAoB,KAAKlF,QAAzB,EAAmCmF,UAAU,IAAIA,UAAU,CAACC,EAAX,KAAkBL,SAAnE,CAFJ;AAGD;;AAEDM,EAAAA,cAAc,CAAEjF,OAAF,EAAW;AACvB,WAAO,KAAKJ,QAAL,CAAc,KAAKiE,eAAL,CAAqB7D,OAArB,CAAd,CAAP;AACD;;AAEDiC,EAAAA,aAAa,CAAEjC,OAAF,EAAiCC,KAAjC,EAAmEC,WAAnE,EAAsGgF,IAAtG,EAAsH;AACjI,UAAMF,EAAE,GAAGxG,KAAK,CAACwB,OAAN,CAAc4E,YAAd,CAA2B5E,OAA3B,CAAX;AACA,QAAIgC,YAAY,GAAG,KAAK6B,eAAL,CAAqB7D,OAArB,CAAnB;AACA,QAAIkC,WAAW,GAAG,KAAKtC,QAAL,CAAcoC,YAAd,CAAlB;AAEAkD,IAAAA,IAAI,GAAGA,IAAI,KAAK,KAAT,GACH,KADG,GAEHA,IAAI,IAAI,iBAAiBd,IAAjB,CAAsBnE,KAAK,CAACkC,IAA5B,CAFZ;;AAIA,QAAI,CAACD,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAG,IAAIxD,WAAJ,CACZsG,EADY,EAEZhF,OAFY,EAGZC,KAHY,EAIZ,IAJY,EAKZ,IALY,CAAd;AAQA+B,MAAAA,YAAY,GAAG,KAAKpC,QAAL,CAAc0C,MAA7B;AACA,WAAK1C,QAAL,CAAcuF,IAAd,CAAmBjD,WAAnB;AACD,KAXD,MAYK;AACHA,MAAAA,WAAW,CAAClC,OAAZ,GAAsBA,OAAtB;AACD;;AAEDxB,IAAAA,KAAK,CAACwB,OAAN,CAAcoF,SAAd,CAAwB,KAAKrE,MAAL,CAAYI,GAApC,EAAyC,KAAKvB,QAAL,CAAcyF,GAAd,CAAkBC,CAAC,IAAIA,CAAC,CAACtF,OAAzB,CAAzC,EAA4E,KAAKuF,IAAL,EAA5E;AACA/G,IAAAA,KAAK,CAACwB,OAAN,CAAcwF,cAAd,CAA6B,KAAKzE,MAAL,CAAYK,KAAzC,EAAgD,KAAKL,MAAL,CAAYG,IAA5D,EAAkE,KAAKH,MAAL,CAAYI,GAA9E;;AAEA,QAAI+D,IAAJ,EAAU;AACR,WAAK9E,aAAL,GAAqB,IAArB;AAEA8B,MAAAA,WAAW,CAACuD,QAAZ,GAAuB,KAAK1E,MAAL,CAAYI,GAAZ,CAAgBuE,SAAvC;AACAxD,MAAAA,WAAW,CAACyD,UAAZ,GAAyBzF,WAAzB;AACA1B,MAAAA,KAAK,CAACwB,OAAN,CAAc4F,aAAd,CAA4B,KAAK9F,WAAjC,EAA8CE,OAA9C;;AAEA,UAAI,CAAC,KAAKqC,WAAL,EAAL,EAAyB;AACvB7D,QAAAA,KAAK,CAACwB,OAAN,CAAcgE,UAAd,CAAyB,KAAKjD,MAAL,CAAYC,KAArC,EAA4C,KAAKD,MAAL,CAAYI,GAAxD;AACA3C,QAAAA,KAAK,CAACwB,OAAN,CAAcgE,UAAd,CAAyB,KAAKjD,MAAL,CAAYG,IAArC,EAA2C,KAAKH,MAAL,CAAYI,GAAvD;AAEA,aAAKtB,SAAL,GAAiBI,KAAjB;AACA,aAAKI,eAAL,GAAuB,KAAvB;AACD;AACF;;AAED,SAAKwF,oBAAL,CAA0B7F,OAA1B,EAAmCC,KAAnC,EAA0CC,WAA1C;;AAEA,SAAKV,UAAL,CAAgB,6BAAhB,EAA+C;AAC7CQ,MAAAA,OAD6C;AAE7CC,MAAAA,KAF6C;AAG7CC,MAAAA,WAH6C;AAI7CgF,MAAAA,IAJ6C;AAK7ChD,MAAAA,WAL6C;AAM7CF,MAAAA,YAN6C;AAO7CF,MAAAA,WAAW,EAAE;AAPgC,KAA/C;;AAUA,WAAOE,YAAP;AACD;;AAEDsC,EAAAA,aAAa,CAAEtE,OAAF,EAAiCC,KAAjC,EAAmE;AAC9E,UAAM+B,YAAY,GAAG,KAAK6B,eAAL,CAAqB7D,OAArB,CAArB;;AAEA,QAAIgC,YAAY,KAAK,CAAC,CAAtB,EAAyB;AAAE;AAAQ;;AAEnC,UAAME,WAAW,GAAG,KAAKtC,QAAL,CAAcoC,YAAd,CAApB;;AAEA,SAAKxC,UAAL,CAAgB,6BAAhB,EAA+C;AAC7CQ,MAAAA,OAD6C;AAE7CC,MAAAA,KAF6C;AAG7CC,MAAAA,WAAW,EAAE,IAHgC;AAI7C8B,MAAAA,YAJ6C;AAK7CE,MAAAA,WAL6C;AAM7CJ,MAAAA,WAAW,EAAE;AANgC,KAA/C;;AASA,SAAKlC,QAAL,CAAckG,MAAd,CAAqB9D,YAArB,EAAmC,CAAnC;AACD;;AAED6D,EAAAA,oBAAoB,CAAE7F,OAAF,EAAWC,KAAX,EAAkBC,WAAlB,EAA+B;AACjD,SAAKH,cAAL,CAAoBC,OAApB,GAA8BA,OAA9B;AACA,SAAKD,cAAL,CAAoBE,KAApB,GAA4BA,KAA5B;AACA,SAAKF,cAAL,CAAoBG,WAApB,GAAkCA,WAAlC;AACD;;AAED6F,EAAAA,OAAO,GAAI;AACT,SAAKhG,cAAL,CAAoBC,OAApB,GAA8B,IAA9B;AACA,SAAKD,cAAL,CAAoBE,KAApB,GAA4B,IAA5B;AACA,SAAKF,cAAL,CAAoBG,WAApB,GAAkC,IAAlC;AACD;;AAED8F,EAAAA,oBAAoB,CAAwB/F,KAAxB,EAA0DgD,KAA1D,EAAoEgD,MAApE,EAAsF9D,IAAtF,EAAqG;AACvH,WAAO,IAAI1D,aAAJ,CAAwB,IAAxB,EAA8BwB,KAA9B,EAAqC,KAAKR,QAAL,CAAcC,IAAnD,EAAyDuD,KAAzD,EAAgE,KAAK7D,OAArE,EAA8E6G,MAA9E,EAAsF9D,IAAtF,CAAP;AACD;;AAED+D,EAAAA,UAAU,CAAwBC,MAAxB,EAAqD;AAC7D,SAAKhH,YAAL,CAAkBiH,IAAlB,CAAuBD,MAAvB;;AAEA,QAAI,CAAC,KAAKhG,SAAN,IAAmBgG,MAAM,CAACT,SAAP,IAAoB,KAAKvF,SAAL,CAAeuF,SAA1D,EAAqE;AACnE,WAAKvF,SAAL,GAAiBgG,MAAjB;AACD;AACF;;AAEDnD,EAAAA,QAAQ,CAAwBnC,SAAxB,EAAwG;AAC9G,UAAM;AAAEZ,MAAAA,KAAF;AAASgD,MAAAA,KAAT;AAAgBgD,MAAAA,MAAhB;AAAwB9D,MAAAA;AAAxB,QAAiCtB,SAAvC;AACA,UAAM;AAAExB,MAAAA;AAAF,QAAW,IAAjB;;AAEA,QAAIA,IAAI,IAAI4D,KAAK,KAAK,MAAtB,EAA8B;AAC5B;AACAzE,MAAAA,KAAK,CAACa,IAAN,CAAWgH,QAAX,CAAoB,KAAK9G,KAAzB,EAAgCF,IAAhC,EAAsC,KAAK0B,MAAL,CAAYK,KAAZ,CAAkB,KAAKjC,YAAL,CAAkBoD,OAAlB,CAA0B+D,WAA5C,CAAtC;AAEAjH,MAAAA,IAAI,CAACkH,KAAL,GAAalH,IAAI,CAACwD,KAAL,GAAaxD,IAAI,CAACuD,IAA/B;AACAvD,MAAAA,IAAI,CAACmH,MAAL,GAAcnH,IAAI,CAAC0D,MAAL,GAAc1D,IAAI,CAACyD,GAAjC;AACD;;AAED,UAAM2D,YAAY,GAAG,KAAKjH,UAAL,CAAiB,8BAA6ByD,KAAM,EAApD,EAA8DpC,SAA9D,CAArB;;AAEA,QAAI4F,YAAY,KAAK,KAArB,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,UAAMN,MAAM,GAAGtF,SAAS,CAACsF,MAAV,GAAmB,KAAKH,oBAAL,CAA0B/F,KAA1B,EAAiCgD,KAAjC,EAAwCgD,MAAxC,EAAgD9D,IAAhD,CAAlC;;AAEA,SAAK3C,UAAL,CAAiB,uBAAsByD,KAAM,EAA7C,EAAuDpC,SAAvD;;AAEA,QAAIoC,KAAK,KAAK,OAAd,EAAuB;AAAE,WAAK9C,SAAL,GAAiBgG,MAAjB;AAAyB;;AAElD,SAAKD,UAAL,CAAgBC,MAAhB;;AAEA,SAAK3G,UAAL,CAAiB,6BAA4ByD,KAAM,EAAnD,EAA6DpC,SAA7D;;AAEA,WAAO,IAAP;AACD;;AAED0E,EAAAA,IAAI,GAAI;AAAE,WAAOmB,IAAI,CAACC,GAAL,EAAP;AAAmB;;AA5f6B;AA+f5D,eAAe7H,WAAf;AACA,SAASJ,WAAT",
	"sourcesContent": [
		"import * as utils from '@interactjs/utils/index'\nimport InteractEvent, { EventPhase } from './InteractEvent'\nimport Interactable from './Interactable'\nimport PointerInfo from './PointerInfo'\nimport { ActionName } from './scope'\n\nexport interface ActionProps<T extends ActionName = Interact.ActionName> {\n  name: T\n  axis?: 'x' | 'y' | 'xy'\n  edges?: Interact.EdgeOptions\n}\n\nexport interface StartAction extends ActionProps {\n  name: ActionName\n}\n\nexport enum _ProxyValues {\n  interactable = '',\n  element = '',\n  prepared = '',\n  pointerIsDown = '',\n  pointerWasMoved = '',\n  _proxy = ''\n}\n\nexport enum _ProxyMethods {\n  start = '',\n  move = '',\n  end = '',\n  stop = '',\n  interacting = ''\n}\n\nexport type PointerArgProps<T extends {} = {}> = {\n  pointer: Interact.PointerType\n  event: Interact.PointerEventType\n  eventTarget: Interact.EventTarget\n  pointerIndex: number\n  pointerInfo: PointerInfo\n  interaction: Interaction\n} & T\n\nexport interface DoPhaseArg<T extends ActionName, P extends EventPhase> {\n  event: Interact.PointerEventType\n  phase: EventPhase\n  interaction: Interaction<T>\n  iEvent: InteractEvent<T, P>\n  preEnd?: boolean\n  type?: string\n}\n\nexport type DoAnyPhaseArg = DoPhaseArg<ActionName, EventPhase>\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:new': { interaction: Interaction }\n    'interactions:down': PointerArgProps<{\n      type: 'down'\n    }>\n    'interactions:move': PointerArgProps<{\n      type: 'move'\n      dx: number\n      dy: number\n      duplicate: boolean\n    }>\n    'interactions:up': PointerArgProps<{\n      type: 'up'\n      curEventTarget: EventTarget\n    }>\n    'interactions:cancel': SignalArgs['interactions:up'] & {\n      type: 'cancel'\n      curEventTarget: EventTarget\n    }\n    'interactions:update-pointer': PointerArgProps<{\n      down: boolean\n    }>\n    'interactions:remove-pointer': PointerArgProps\n    'interactions:blur'\n    'interactions:before-action-start': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-start': DoAnyPhaseArg\n    'interactions:after-action-start': DoAnyPhaseArg\n    'interactions:before-action-move': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-move': DoAnyPhaseArg\n    'interactions:after-action-move': DoAnyPhaseArg\n    'interactions:before-action-end': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-end': DoAnyPhaseArg\n    'interactions:after-action-end': DoAnyPhaseArg\n    'interactions:stop': { interaction: Interaction }\n  }\n}\n\nexport type InteractionProxy<T extends ActionName = ActionName> = Pick<\nInteraction<T>,\nkeyof typeof _ProxyValues | keyof typeof _ProxyMethods\n>\n\nlet idCounter = 0\n\nexport class Interaction<T extends ActionName = ActionName> {\n  // current interactable being interacted with\n  interactable: Interactable = null\n\n  // the target element of the interactable\n  element: Interact.Element = null\n  rect: Interact.FullRect\n  _rects?: {\n    start: Interact.FullRect\n    corrected: Interact.FullRect\n    previous: Interact.FullRect\n    delta: Interact.FullRect\n  }\n  edges: Interact.EdgeOptions\n\n  _scopeFire: Interact.Scope['fire']\n\n  // action that's ready to be fired on next move event\n  prepared: ActionProps<T> = {\n    name : null,\n    axis : null,\n    edges: null,\n  }\n\n  pointerType: string\n\n  // keep track of added pointers\n  pointers: PointerInfo[] = []\n\n  // pointerdown/mousedown/touchstart event\n  downEvent: Interact.PointerEventType = null\n\n  downPointer: Interact.PointerType = {} as Interact.PointerType\n\n  _latestPointer: {\n    pointer: Interact.PointerType\n    event: Interact.PointerEventType\n    eventTarget: Node\n  } = {\n    pointer: null,\n    event: null,\n    eventTarget: null,\n  }\n\n  // previous action event\n  prevEvent: InteractEvent<T, EventPhase> = null\n\n  pointerIsDown = false\n  pointerWasMoved = false\n  _interacting = false\n  _ending = false\n  _stopped = true\n  _proxy: InteractionProxy<T> = null\n\n  simulation = null\n\n  get pointerMoveTolerance () {\n    return 1\n  }\n\n  /**\n   * @alias Interaction.prototype.move\n   */\n  doMove = utils.warnOnce(\n    function (this: Interaction, signalArg: any) {\n      this.move(signalArg)\n    },\n    'The interaction.doMove() method has been renamed to interaction.move()')\n\n  coords: Interact.CoordsSet = {\n    // Starting InteractEvent pointer coordinates\n    start: utils.pointer.newCoords(),\n    // Previous native pointer move event coordinates\n    prev: utils.pointer.newCoords(),\n    // current native pointer move event coordinates\n    cur: utils.pointer.newCoords(),\n    // Change in coordinates and time of the pointer\n    delta: utils.pointer.newCoords(),\n    // pointer velocity\n    velocity: utils.pointer.newCoords(),\n  }\n\n  readonly _id: number = idCounter++\n\n  /** */\n  constructor ({ pointerType, scopeFire }: {\n    pointerType?: string\n    scopeFire: Interact.Scope['fire']\n  }) {\n    this._scopeFire = scopeFire\n    this.pointerType = pointerType\n\n    const that = this\n\n    this._proxy = {} as InteractionProxy<T>\n\n    for (const key in _ProxyValues) {\n      Object.defineProperty(this._proxy, key, {\n        get () { return that[key] },\n      })\n    }\n\n    for (const key in _ProxyMethods) {\n      Object.defineProperty(this._proxy, key, {\n        value: (...args) => that[key](...args),\n      })\n    }\n\n    this._scopeFire('interactions:new', { interaction: this })\n  }\n\n  pointerDown (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget) {\n    const pointerIndex = this.updatePointer(pointer, event, eventTarget, true)\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:down', {\n      pointer,\n      event,\n      eventTarget,\n      pointerIndex,\n      pointerInfo,\n      type: 'down',\n      interaction: this,\n    })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable({\n   *     // disable the default drag start by down->move\n   *     manualStart: true\n   *   })\n   *   // start dragging after the user holds the pointer down\n   *   .on('hold', function (event) {\n   *     var interaction = event.interaction\n   *\n   *     if (!interaction.interacting()) {\n   *       interaction.start({ name: 'drag' },\n   *                         event.interactable,\n   *                         event.currentTarget)\n   *     }\n   * })\n   * ```\n   *\n   * Start an action with the given Interactable and Element as tartgets. The\n   * action must be enabled for the target Interactable and an appropriate\n   * number of pointers must be held down - 1 for drag/resize, 2 for gesture.\n   *\n   * Use it with `interactable.<action>able({ manualStart: false })` to always\n   * [start actions manually](https://github.com/taye/interact.js/issues/114)\n   *\n   * @param {object} action   The action to be performed - drag, resize, etc.\n   * @param {Interactable} target  The Interactable to target\n   * @param {Element} element The DOM Element to target\n   * @return {object} interact\n   */\n  start (action: StartAction, interactable: Interactable, element: Interact.Element) {\n    if (this.interacting() ||\n        !this.pointerIsDown ||\n        this.pointers.length < (action.name === 'gesture' ? 2 : 1) ||\n        !interactable.options[action.name].enabled) {\n      return false\n    }\n\n    utils.copyAction(this.prepared, action)\n\n    this.interactable = interactable\n    this.element      = element\n    this.rect         = interactable.getRect(element)\n    this.edges        = this.prepared.edges\n      ? utils.extend({}, this.prepared.edges)\n      : { left: true, right: true, top: true, bottom: true }\n    this._stopped     = false\n    this._interacting = this._doPhase({\n      interaction: this,\n      event: this.downEvent,\n      phase: 'start',\n    }) && !this._stopped\n\n    return this._interacting\n  }\n\n  pointerMove (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget) {\n    if (!this.simulation && !(this.modification && this.modification.endResult)) {\n      this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const duplicateMove = (this.coords.cur.page.x === this.coords.prev.page.x &&\n                           this.coords.cur.page.y === this.coords.prev.page.y &&\n                           this.coords.cur.client.x === this.coords.prev.client.x &&\n                           this.coords.cur.client.y === this.coords.prev.client.y)\n\n    let dx\n    let dy\n\n    // register movement greater than pointerMoveTolerance\n    if (this.pointerIsDown && !this.pointerWasMoved) {\n      dx = this.coords.cur.client.x - this.coords.start.client.x\n      dy = this.coords.cur.client.y - this.coords.start.client.y\n\n      this.pointerWasMoved = utils.hypot(dx, dy) > this.pointerMoveTolerance\n    }\n\n    const pointerIndex = this.getPointerIndex(pointer)\n    const signalArg = {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      type: 'move' as const,\n      eventTarget,\n      dx,\n      dy,\n      duplicate: duplicateMove,\n      interaction: this,\n    }\n\n    if (!duplicateMove) {\n      // set pointer coordinate, time changes and velocity\n      utils.pointer.setCoordVelocity(this.coords.velocity, this.coords.delta)\n    }\n\n    this._scopeFire('interactions:move', signalArg)\n\n    if (!duplicateMove && !this.simulation) {\n      // if interacting, fire an 'action-move' signal etc\n      if (this.interacting()) {\n        signalArg.type = null\n        this.move(signalArg)\n      }\n\n      if (this.pointerWasMoved) {\n        utils.pointer.copyCoords(this.coords.prev, this.coords.cur)\n      }\n    }\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('dragmove', function (event) {\n   *     if (someCondition) {\n   *       // change the snap settings\n   *       event.interactable.draggable({ snap: { targets: [] }})\n   *       // fire another move event with re-calculated snap\n   *       event.interaction.move()\n   *     }\n   *   })\n   * ```\n   *\n   * Force a move of the current action at the same coordinates. Useful if\n   * snap/restrict has been changed and you want a movement with the new\n   * settings.\n   */\n  move (signalArg?) {\n    if (!signalArg || !signalArg.event) {\n      utils.pointer.setZeroCoords(this.coords.delta)\n    }\n\n    signalArg = utils.extend({\n      pointer: this._latestPointer.pointer,\n      event: this._latestPointer.event,\n      eventTarget: this._latestPointer.eventTarget,\n      interaction: this,\n    }, signalArg || {})\n\n    signalArg.phase = 'move'\n\n    this._doPhase(signalArg)\n  }\n\n  // End interact move events and stop auto-scroll unless simulation is running\n  pointerUp (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget, curEventTarget: Interact.EventTarget) {\n    let pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) {\n      pointerIndex = this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const type = /cancel$/i.test(event.type) ? 'cancel' : 'up'\n\n    this._scopeFire(`interactions:${type}` as 'interactions:up' | 'interactions:cancel', {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      eventTarget,\n      type: type as any,\n      curEventTarget,\n      interaction: this,\n    })\n\n    if (!this.simulation) {\n      this.end(event)\n    }\n\n    this.pointerIsDown = false\n    this.removePointer(pointer, event)\n  }\n\n  documentBlur (event) {\n    this.end(event)\n    this._scopeFire('interactions:blur', { event, type: 'blur', interaction: this })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('move', function (event) {\n   *     if (event.pageX > 1000) {\n   *       // end the current action\n   *       event.interaction.end()\n   *       // stop all further listeners from being called\n   *       event.stopImmediatePropagation()\n   *     }\n   *   })\n   * ```\n   *\n   * @param {PointerEvent} [event]\n   */\n  end (event?: Interact.PointerEventType) {\n    this._ending = true\n    event = event || this._latestPointer.event\n    let endPhaseResult\n\n    if (this.interacting()) {\n      endPhaseResult = this._doPhase({\n        event,\n        interaction: this,\n        phase: 'end',\n      })\n    }\n\n    this._ending = false\n\n    if (endPhaseResult === true) {\n      this.stop()\n    }\n  }\n\n  currentAction () {\n    return this._interacting ? this.prepared.name : null\n  }\n\n  interacting () {\n    return this._interacting\n  }\n\n  /** */\n  stop () {\n    this._scopeFire('interactions:stop', { interaction: this })\n\n    this.interactable = this.element = null\n\n    this._interacting = false\n    this._stopped = true\n    this.prepared.name = this.prevEvent = null\n  }\n\n  getPointerIndex (pointer) {\n    const pointerId = utils.pointer.getPointerId(pointer)\n\n    // mouse and pen interactions may have only one pointer\n    return (this.pointerType === 'mouse' || this.pointerType === 'pen')\n      ? this.pointers.length - 1\n      : utils.arr.findIndex(this.pointers, curPointer => curPointer.id === pointerId)\n  }\n\n  getPointerInfo (pointer) {\n    return this.pointers[this.getPointerIndex(pointer)]\n  }\n\n  updatePointer (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget, down?: boolean) {\n    const id = utils.pointer.getPointerId(pointer)\n    let pointerIndex = this.getPointerIndex(pointer)\n    let pointerInfo = this.pointers[pointerIndex]\n\n    down = down === false\n      ? false\n      : down || /(down|start)$/i.test(event.type)\n\n    if (!pointerInfo) {\n      pointerInfo = new PointerInfo(\n        id,\n        pointer,\n        event,\n        null,\n        null,\n      )\n\n      pointerIndex = this.pointers.length\n      this.pointers.push(pointerInfo)\n    }\n    else {\n      pointerInfo.pointer = pointer\n    }\n\n    utils.pointer.setCoords(this.coords.cur, this.pointers.map(p => p.pointer), this._now())\n    utils.pointer.setCoordDeltas(this.coords.delta, this.coords.prev, this.coords.cur)\n\n    if (down) {\n      this.pointerIsDown = true\n\n      pointerInfo.downTime = this.coords.cur.timeStamp\n      pointerInfo.downTarget = eventTarget\n      utils.pointer.pointerExtend(this.downPointer, pointer)\n\n      if (!this.interacting()) {\n        utils.pointer.copyCoords(this.coords.start, this.coords.cur)\n        utils.pointer.copyCoords(this.coords.prev, this.coords.cur)\n\n        this.downEvent = event\n        this.pointerWasMoved = false\n      }\n    }\n\n    this._updateLatestPointer(pointer, event, eventTarget)\n\n    this._scopeFire('interactions:update-pointer', {\n      pointer,\n      event,\n      eventTarget,\n      down,\n      pointerInfo,\n      pointerIndex,\n      interaction: this,\n    })\n\n    return pointerIndex\n  }\n\n  removePointer (pointer: Interact.PointerType, event: Interact.PointerEventType) {\n    const pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) { return }\n\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:remove-pointer', {\n      pointer,\n      event,\n      eventTarget: null,\n      pointerIndex,\n      pointerInfo,\n      interaction: this,\n    })\n\n    this.pointers.splice(pointerIndex, 1)\n  }\n\n  _updateLatestPointer (pointer, event, eventTarget) {\n    this._latestPointer.pointer = pointer\n    this._latestPointer.event = event\n    this._latestPointer.eventTarget = eventTarget\n  }\n\n  destroy () {\n    this._latestPointer.pointer = null\n    this._latestPointer.event = null\n    this._latestPointer.eventTarget = null\n  }\n\n  _createPreparedEvent<P extends EventPhase> (event: Interact.PointerEventType, phase: P, preEnd?: boolean, type?: string) {\n    return new InteractEvent<T, P>(this, event, this.prepared.name, phase, this.element, preEnd, type)\n  }\n\n  _fireEvent<P extends EventPhase> (iEvent: InteractEvent<T, P>) {\n    this.interactable.fire(iEvent)\n\n    if (!this.prevEvent || iEvent.timeStamp >= this.prevEvent.timeStamp) {\n      this.prevEvent = iEvent\n    }\n  }\n\n  _doPhase<P extends EventPhase> (signalArg: Omit<DoPhaseArg<T, P>, 'iEvent'> & { iEvent?: InteractEvent<T, P> }) {\n    const { event, phase, preEnd, type } = signalArg\n    const { rect } = this\n\n    if (rect && phase === 'move') {\n      // update the rect changes due to pointer move\n      utils.rect.addEdges(this.edges, rect, this.coords.delta[this.interactable.options.deltaSource])\n\n      rect.width = rect.right - rect.left\n      rect.height = rect.bottom - rect.top\n    }\n\n    const beforeResult = this._scopeFire(`interactions:before-action-${phase}` as any, signalArg)\n\n    if (beforeResult === false) {\n      return false\n    }\n\n    const iEvent = signalArg.iEvent = this._createPreparedEvent(event, phase, preEnd, type)\n\n    this._scopeFire(`interactions:action-${phase}` as any, signalArg)\n\n    if (phase === 'start') { this.prevEvent = iEvent }\n\n    this._fireEvent(iEvent)\n\n    this._scopeFire(`interactions:after-action-${phase}` as any, signalArg)\n\n    return true\n  }\n\n  _now () { return Date.now() }\n}\n\nexport default Interaction\nexport { PointerInfo }\n"
	]
}