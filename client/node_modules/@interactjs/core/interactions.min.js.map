{
	"version": 3,
	"sources": [
		"interactions.ts"
	],
	"names": [
		"browser",
		"domObjects",
		"nodeContains",
		"pointerUtils",
		"InteractionBase",
		"interactablePreventDefault",
		"finder",
		"Scope",
		"methodNames",
		"doOnInteractions",
		"method",
		"scope",
		"event",
		"interactions",
		"list",
		"pointerType",
		"getPointerType",
		"eventTarget",
		"curEventTarget",
		"getEventTargets",
		"matches",
		"test",
		"type",
		"prevTouchTime",
		"now",
		"changedTouch",
		"changedTouches",
		"pointer",
		"searchDetails",
		"pointerId",
		"getPointerId",
		"eventType",
		"interaction",
		"getInteraction",
		"push",
		"invalidPointer",
		"supportsPointerEvent",
		"i",
		"length",
		"pointerIsDown",
		"timeStamp",
		"signalArg",
		"search",
		"fire",
		"new",
		"onDocSignal",
		"doc",
		"options",
		"eventMethodName",
		"docEvents",
		"events",
		"eventMethod",
		"isIOS",
		"passive",
		"delegatedEvents",
		"delegateListener",
		"delegateUseCapture",
		"eventOptions",
		"listener",
		"id",
		"install",
		"listeners",
		"pEventTypes",
		"releasePointersOnRemovedEls",
		"_interacting",
		"pointers",
		"documents",
		"some",
		"downTarget",
		"removePointer",
		"PointerEvent",
		"down",
		"pointerDown",
		"move",
		"pointerMove",
		"up",
		"pointerUp",
		"cancel",
		"documentBlur",
		"Interaction",
		"pointerMoveTolerance",
		"value",
		"_now",
		"scopeFire",
		"name",
		"arg",
		"usePlugin",
		"[object Object]",
		"interactable",
		"stop",
		"destroy",
		"splice"
	],
	"mappings": "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",
	"sourcesContent": [
		"import browser from '@interactjs/utils/browser'\nimport domObjects from '@interactjs/utils/domObjects'\nimport { nodeContains } from '@interactjs/utils/domUtils'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport InteractionBase from './Interaction'\nimport interactablePreventDefault from './interactablePreventDefault'\nimport finder, { SearchDetails } from './interactionFinder'\nimport Scope from './scope'\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    Interaction: typeof InteractionBase\n    interactions: {\n      new: <T extends ActionName> (options: any) => InteractionBase<T>\n      list: InteractionBase[]\n      listeners: { [type: string]: Interact.Listener }\n      docEvents: Array<{ type: string, listener: Interact.Listener }>\n      pointerMoveTolerance: number\n    }\n    prevTouchTime: number\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:find': {\n      interaction: InteractionBase\n      searchDetails: SearchDetails\n    }\n  }\n}\n\nconst methodNames = [\n  'pointerDown', 'pointerMove', 'pointerUp',\n  'updatePointer', 'removePointer', 'windowBlur',\n]\n\nfunction install (scope: Scope) {\n  const listeners = {} as any\n\n  for (const method of methodNames) {\n    listeners[method] = doOnInteractions(method, scope)\n  }\n\n  const pEventTypes = browser.pEventTypes\n  let docEvents: typeof scope.interactions.docEvents\n\n  if (domObjects.PointerEvent) {\n    docEvents = [\n      { type: pEventTypes.down,   listener: releasePointersOnRemovedEls },\n      { type: pEventTypes.down,   listener: listeners.pointerDown },\n      { type: pEventTypes.move,   listener: listeners.pointerMove },\n      { type: pEventTypes.up,     listener: listeners.pointerUp },\n      { type: pEventTypes.cancel, listener: listeners.pointerUp },\n    ]\n  }\n  else {\n    docEvents = [\n      { type: 'mousedown', listener: listeners.pointerDown },\n      { type: 'mousemove', listener: listeners.pointerMove },\n      { type: 'mouseup', listener: listeners.pointerUp },\n\n      { type: 'touchstart', listener: releasePointersOnRemovedEls },\n      { type: 'touchstart', listener: listeners.pointerDown },\n      { type: 'touchmove', listener: listeners.pointerMove },\n      { type: 'touchend', listener: listeners.pointerUp },\n      { type: 'touchcancel', listener: listeners.pointerUp },\n    ]\n  }\n\n  docEvents.push({\n    type: 'blur',\n    listener (event) {\n      for (const interaction of scope.interactions.list) {\n        interaction.documentBlur(event)\n      }\n    },\n  })\n\n  // for ignoring browser's simulated mouse events\n  scope.prevTouchTime = 0\n\n  scope.Interaction = class <T extends Interact.ActionName> extends InteractionBase<T> {\n    get pointerMoveTolerance () {\n      return scope.interactions.pointerMoveTolerance\n    }\n\n    set pointerMoveTolerance (value) {\n      scope.interactions.pointerMoveTolerance = value\n    }\n\n    _now () { return scope.now() }\n  }\n\n  scope.interactions = {\n    // all active and idle interactions\n    list: [],\n    new<T extends Interact.ActionName> (options: { pointerType?: string, scopeFire?: Scope['fire'] }) {\n      options.scopeFire = (name, arg) => scope.fire(name, arg)\n\n      const interaction = new scope.Interaction<T>(options as Required<typeof options>)\n\n      scope.interactions.list.push(interaction)\n      return interaction\n    },\n    listeners,\n    docEvents,\n    pointerMoveTolerance: 1,\n  }\n\n  function releasePointersOnRemovedEls () {\n    // for all inactive touch interactions with pointers down\n    for (const interaction of scope.interactions.list) {\n      if (!interaction.pointerIsDown ||\n        interaction.pointerType !== 'touch' ||\n        interaction._interacting) {\n        continue\n      }\n\n      // if a pointer is down on an element that is no longer in the DOM tree\n      for (const pointer of interaction.pointers) {\n        if (!scope.documents.some(({ doc }) => nodeContains(doc, pointer.downTarget))) {\n          // remove the pointer from the interaction\n          interaction.removePointer(pointer.pointer, pointer.event)\n        }\n      }\n    }\n  }\n\n  scope.usePlugin(interactablePreventDefault)\n}\n\nfunction doOnInteractions (method, scope) {\n  return function (event) {\n    const interactions = scope.interactions.list\n\n    const pointerType = pointerUtils.getPointerType(event)\n    const [eventTarget, curEventTarget] = pointerUtils.getEventTargets(event)\n    const matches = [] // [ [pointer, interaction], ...]\n\n    if (/^touch/.test(event.type)) {\n      scope.prevTouchTime = scope.now()\n\n      for (const changedTouch of event.changedTouches) {\n        const pointer = changedTouch\n        const pointerId = pointerUtils.getPointerId(pointer)\n        const searchDetails: SearchDetails = {\n          pointer,\n          pointerId,\n          pointerType,\n          eventType: event.type,\n          eventTarget,\n          curEventTarget,\n          scope,\n        }\n        const interaction = getInteraction(searchDetails)\n\n        matches.push([\n          searchDetails.pointer,\n          searchDetails.eventTarget,\n          searchDetails.curEventTarget,\n          interaction,\n        ])\n      }\n    }\n    else {\n      let invalidPointer = false\n\n      if (!browser.supportsPointerEvent && /mouse/.test(event.type)) {\n        // ignore mouse events while touch interactions are active\n        for (let i = 0; i < interactions.length && !invalidPointer; i++) {\n          invalidPointer = interactions[i].pointerType !== 'mouse' && interactions[i].pointerIsDown\n        }\n\n        // try to ignore mouse events that are simulated by the browser\n        // after a touch event\n        invalidPointer = invalidPointer ||\n          (scope.now() - scope.prevTouchTime < 500) ||\n          // on iOS and Firefox Mobile, MouseEvent.timeStamp is zero if simulated\n          event.timeStamp === 0\n      }\n\n      if (!invalidPointer) {\n        const searchDetails = {\n          pointer: event,\n          pointerId: pointerUtils.getPointerId(event),\n          pointerType,\n          eventType: event.type,\n          curEventTarget,\n          eventTarget,\n          scope,\n        }\n\n        const interaction = getInteraction(searchDetails)\n\n        matches.push([\n          searchDetails.pointer,\n          searchDetails.eventTarget,\n          searchDetails.curEventTarget,\n          interaction,\n        ])\n      }\n    }\n\n    // eslint-disable-next-line no-shadow\n    for (const [pointer, eventTarget, curEventTarget, interaction] of matches) {\n      interaction[method](pointer, event, eventTarget, curEventTarget)\n    }\n  }\n}\n\nfunction getInteraction (searchDetails: SearchDetails) {\n  const { pointerType, scope } = searchDetails\n\n  const foundInteraction = finder.search(searchDetails)\n  const signalArg = { interaction: foundInteraction, searchDetails }\n\n  scope.fire('interactions:find', signalArg)\n\n  return signalArg.interaction || scope.interactions.new({ pointerType })\n}\n\nfunction onDocSignal<T extends 'scope:add-document' | 'scope:remove-document'> ({ doc, scope, options }: Interact.SignalArgs[T], eventMethodName: 'add' | 'remove') {\n  const { interactions: { docEvents }, events } = scope\n  const eventMethod = events[eventMethodName]\n\n  if (scope.browser.isIOS && !options.events) {\n    options.events = { passive: false }\n  }\n\n  // delegate event listener\n  for (const eventType in events.delegatedEvents) {\n    eventMethod(doc, eventType, events.delegateListener)\n    eventMethod(doc, eventType, events.delegateUseCapture, true)\n  }\n\n  const eventOptions = options && options.events\n\n  for (const { type, listener } of docEvents) {\n    eventMethod(doc, type, listener, eventOptions)\n  }\n}\n\nconst interactions: Interact.Plugin = {\n  id: 'core/interactions',\n  install,\n  listeners: {\n    'scope:add-document': arg => onDocSignal(arg, 'add'),\n    'scope:remove-document': arg => onDocSignal(arg, 'remove'),\n    'interactable:unset': ({ interactable }, scope) => {\n      // Stop and destroy related interactions when an Interactable is unset\n      for (let i = scope.interactions.list.length - 1; i >= 0; i--) {\n        const interaction = scope.interactions.list[i]\n\n        if (interaction.interactable !== interactable) { continue }\n\n        interaction.stop()\n        scope.fire('interactions:destroy', { interaction })\n        interaction.destroy()\n\n        if (scope.interactions.list.length > 2) {\n          scope.interactions.list.splice(i, 1)\n        }\n      }\n    },\n  },\n  onDocSignal,\n  doOnInteractions,\n  methodNames,\n}\n\nexport default interactions\n"
	]
}