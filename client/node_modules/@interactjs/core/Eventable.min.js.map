{
	"version": 3,
	"sources": [
		"Eventable.ts"
	],
	"names": [
		"arr",
		"extend",
		"normalize",
		"fireUntilImmediateStopped",
		"event",
		"listeners",
		"listener",
		"immediatePropagationStopped",
		"constructor",
		"options",
		"this",
		"types",
		"propagationStopped",
		"global",
		"fire",
		"type",
		"on",
		"merge",
		"off",
		"eventList",
		"length",
		"subListener",
		"index",
		"indexOf",
		"splice",
		"getRect",
		"_element"
	],
	"mappings": "UAAYA,MAAS,6BACdC,MAAY,gCACZC,MAAwC,qCAE/C,SAASC,EAGNC,EAAqCC,GACtC,IAAK,MAAMC,KAAYD,EAAW,CAChC,GAAID,EAAMG,4BAA+B,MAEzCD,EAASF,mBAIb,MAOEI,YAAaC,GAAoCC,KANjDD,aAMiD,EAAAC,KALjDC,MAA6B,GAKoBD,KAJjDE,oBAAqB,EAI4BF,KAHjDH,6BAA8B,EAGmBG,KAFjDG,YAEiD,EAC/CH,KAAKD,QAAUR,EAAO,GAAIQ,GAAW,IAGvCK,KAAMV,GACJ,IAAIC,EACJ,MAAMQ,EAASH,KAAKG,QAIfR,EAAYK,KAAKC,MAAMP,EAAMW,QAChCZ,EAA0BC,EAAOC,IAI9BD,EAAMQ,oBAAsBC,IAAWR,EAAYQ,EAAOT,EAAMW,QACnEZ,EAA0BC,EAAOC,GAIrCW,GAAID,EAAcT,GAChB,MAAMD,EAAYH,EAAUa,EAAMT,GAElC,IAAKS,KAAQV,EACXK,KAAKC,MAAMI,GAAQf,EAAIiB,MAAMP,KAAKC,MAAMI,IAAS,GAAIV,EAAUU,IAInEG,IAAKH,EAAcT,GACjB,MAAMD,EAAYH,EAAUa,EAAMT,GAElC,IAAKS,KAAQV,EAAW,CACtB,MAAMc,EAAYT,KAAKC,MAAMI,GAE7B,GAAKI,GAAcA,EAAUC,OAE7B,IAAK,MAAMC,KAAehB,EAAUU,GAAO,CACzC,MAAMO,EAAQH,EAAUI,QAAQF,IAEjB,IAAXC,GACFH,EAAUK,OAAOF,EAAO,KAMhCG,QAASC,GACP,OAAO",
	"sourcesContent": [
		"import * as arr from '@interactjs/utils/arr'\nimport extend from '@interactjs/utils/extend'\nimport normalize, { NormalizedListeners } from '@interactjs/utils/normalizeListeners'\n\nfunction fireUntilImmediateStopped<\n  T extends Interact.ActionName,\n  P extends Interact.EventPhase,\n> (event: Interact.InteractEvent<T, P>, listeners: Interact.Listener[]) {\n  for (const listener of listeners) {\n    if (event.immediatePropagationStopped) { break }\n\n    listener(event)\n  }\n}\n\nclass Eventable {\n  options: any\n  types: NormalizedListeners = {}\n  propagationStopped = false\n  immediatePropagationStopped = false\n  global: any\n\n  constructor (options?: { [index: string]: any }) {\n    this.options = extend({}, options || {})\n  }\n\n  fire (event: any) {\n    let listeners\n    const global = this.global\n\n    // Interactable#on() listeners\n    // tslint:disable no-conditional-assignment\n    if ((listeners = this.types[event.type])) {\n      fireUntilImmediateStopped(event, listeners)\n    }\n\n    // interact.on() listeners\n    if (!event.propagationStopped && global && (listeners = global[event.type]))  {\n      fireUntilImmediateStopped(event, listeners)\n    }\n  }\n\n  on (type: string, listener: Interact.ListenersArg) {\n    const listeners = normalize(type, listener)\n\n    for (type in listeners) {\n      this.types[type] = arr.merge(this.types[type] || [], listeners[type])\n    }\n  }\n\n  off (type: string, listener: Interact.ListenersArg) {\n    const listeners = normalize(type, listener)\n\n    for (type in listeners) {\n      const eventList = this.types[type]\n\n      if (!eventList || !eventList.length) { continue }\n\n      for (const subListener of listeners[type]) {\n        const index = eventList.indexOf(subListener)\n\n        if (index !== -1) {\n          eventList.splice(index, 1)\n        }\n      }\n    }\n  }\n\n  getRect (_element: Interact.Element): Interact.Rect {\n    return null\n  }\n}\n\nexport default Eventable\n"
	]
}