{
	"version": 3,
	"sources": [
		"InteractStatic.ts"
	],
	"names": [
		"browser",
		"utils",
		"isNonNativeEvent",
		"InteractStatic",
		"constructor",
		"scope",
		"this",
		"getPointerAverage",
		"pointer",
		"pointerAverage",
		"getTouchBBox",
		"touchBBox",
		"getTouchDistance",
		"touchDistance",
		"getTouchAngle",
		"touchAngle",
		"getElementRect",
		"dom",
		"getElementClientRect",
		"matchesSelector",
		"closest",
		"globalEvents",
		"dynamicDrop",
		"version",
		"interact",
		"prototype",
		"target",
		"options",
		"interactable",
		"interactables",
		"get",
		"new",
		"events",
		"global",
		"key",
		"Object",
		"getOwnPropertyNames",
		"extend",
		"use",
		"plugin",
		"usePlugin",
		"isSet",
		"context",
		"on",
		"type",
		"listener",
		"is",
		"string",
		"search",
		"trim",
		"split",
		"array",
		"eventType",
		"object",
		"prop",
		"actions",
		"push",
		"add",
		"document",
		"off",
		"index",
		"indexOf",
		"splice",
		"remove",
		"debug",
		"supportsTouch",
		"supportsPointerEvent",
		"stop",
		"interaction",
		"interactions",
		"list",
		"pointerMoveTolerance",
		"newValue",
		"number",
		"addDocument",
		"doc",
		"removeDocument"
	],
	"mappings": "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",
	"sourcesContent": [
		"/** @module interact */\n\nimport browser from '@interactjs/utils/browser'\nimport * as utils from '@interactjs/utils/index'\nimport Interactable from './Interactable'\nimport { Options } from './defaultOptions'\nimport { isNonNativeEvent } from './scope'\n\nexport interface InteractStatic {\n  (target: Interact.Target, options?: Options): Interactable\n}\n\nexport class InteractStatic {\n  // expose the functions used to calculate multi-touch properties\n  getPointerAverage  = utils.pointer.pointerAverage\n  getTouchBBox = utils.pointer.touchBBox\n  getTouchDistance = utils.pointer.touchDistance\n  getTouchAngle = utils.pointer.touchAngle\n\n  getElementRect = utils.dom.getElementRect\n  getElementClientRect = utils.dom.getElementClientRect\n  matchesSelector = utils.dom.matchesSelector\n  closest = utils.dom.closest\n\n  globalEvents: any = {}\n\n  dynamicDrop: (newValue?: boolean) => boolean | this\n\n  // eslint-disable-next-line no-undef\n  version = process.env.npm_package_version\n  interact: InteractStatic\n\n  constructor (private scope: Interact.Scope) {\n    const { prototype } = this.constructor\n\n    /**\n     * ```js\n     * interact('#draggable').draggable(true)\n     *\n     * var rectables = interact('rect')\n     * rectables\n     *   .gesturable(true)\n     *   .on('gesturemove', function (event) {\n     *       // ...\n     *   })\n     * ```\n     *\n     * The methods of this variable can be used to set elements as interactables\n     * and also to change various default settings.\n     *\n     * Calling it as a function and passing an element or a valid CSS selector\n     * string returns an Interactable object which has various methods to configure\n     * it.\n     *\n     * @global\n     *\n     * @param {Element | string} target The HTML or SVG Element to interact with\n     * or CSS selector\n     * @return {Interactable}\n     */\n    const interact = ((target, options) => {\n      let interactable = scope.interactables.get(target, options)\n\n      if (!interactable) {\n        interactable = scope.interactables.new(target, options)\n        interactable.events.global = this.globalEvents\n      }\n\n      return interactable\n    }) as InteractStatic\n\n    for (const key of Object.getOwnPropertyNames(this.constructor.prototype)) {\n      interact[key] = prototype[key]\n    }\n\n    utils.extend(interact as any, this)\n    interact.constructor = this.constructor\n    this.interact = interact\n\n    return interact\n  }\n\n  /**\n   * Use a plugin\n   *\n   * @alias module:interact.use\n   *\n   * @param {Object} plugin\n   * @param {function} plugin.install\n   * @return {InteractStatic}\n   */\n  use (plugin: Interact.Plugin, options?: { [key: string]: any }) {\n    this.scope.usePlugin(plugin, options)\n\n    return this\n  }\n\n  /**\n   * Check if an element or selector has been set with the {@link interact}\n   * function\n   *\n   * @alias module:interact.isSet\n   *\n   * @param {Element} element The Element being searched for\n   * @return {boolean} Indicates if the element or CSS selector was previously\n   * passed to interact\n   */\n  isSet (target: Interact.Element, options?: any) {\n    return !!this.scope.interactables.get(target, options && options.context)\n  }\n\n  /**\n   * Add a global listener for an InteractEvent or adds a DOM event to `document`\n   *\n   * @alias module:interact.on\n   *\n   * @param {string | array | object} type The types of events to listen for\n   * @param {function} listener The function event (s)\n   * @param {object | boolean} [options] object or useCapture flag for\n   * addEventListener\n   * @return {object} interact\n   */\n  on (type: string | Interact.EventTypes, listener: Interact.ListenersArg, options?: object) {\n    if (utils.is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (utils.is.array(type)) {\n      for (const eventType of (type as any[])) {\n        this.on(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (utils.is.object(type)) {\n      for (const prop in type) {\n        this.on(prop, (type as any)[prop], listener)\n      }\n\n      return this\n    }\n\n    // if it is an InteractEvent type, add listener to globalEvents\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      // if this type of event was never bound\n      if (!this.globalEvents[type]) {\n        this.globalEvents[type] = [listener]\n      }\n      else {\n        this.globalEvents[type].push(listener)\n      }\n    }\n    // If non InteractEvent type, addEventListener to document\n    else {\n      this.scope.events.add(this.scope.document, type, listener as Interact.Listener, { options })\n    }\n\n    return this\n  }\n\n  /**\n   * Removes a global InteractEvent listener or DOM event from `document`\n   *\n   * @alias module:interact.off\n   *\n   * @param {string | array | object} type The types of events that were listened\n   * for\n   * @param {function} listener The listener function to be removed\n   * @param {object | boolean} options [options] object or useCapture flag for\n   * removeEventListener\n   * @return {object} interact\n   */\n  off (type: Interact.EventTypes, listener: any, options?: object) {\n    if (utils.is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (utils.is.array(type)) {\n      for (const eventType of type) {\n        this.off(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (utils.is.object(type)) {\n      for (const prop in type) {\n        this.off(prop, type[prop], listener)\n      }\n\n      return this\n    }\n\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      let index: number\n\n      if (type in this.globalEvents &&\n          (index = this.globalEvents[type].indexOf(listener)) !== -1) {\n        this.globalEvents[type].splice(index, 1)\n      }\n    }\n    else {\n      this.scope.events.remove(this.scope.document, type, listener, options)\n    }\n\n    return this\n  }\n\n  debug () {\n    return this.scope\n  }\n\n  /**\n   * @alias module:interact.supportsTouch\n   *\n   * @return {boolean} Whether or not the browser supports touch input\n   */\n  supportsTouch () {\n    return browser.supportsTouch\n  }\n\n  /**\n   * @alias module:interact.supportsPointerEvent\n   *\n   * @return {boolean} Whether or not the browser supports PointerEvents\n   */\n  supportsPointerEvent () {\n    return browser.supportsPointerEvent\n  }\n\n  /**\n   * Cancels all interactions (end events are not fired)\n   *\n   * @alias module:interact.stop\n   *\n   * @return {object} interact\n   */\n  stop () {\n    for (const interaction of this.scope.interactions.list) {\n      interaction.stop()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns or sets the distance the pointer must be moved before an action\n   * sequence occurs. This also affects tolerance for tap events.\n   *\n   * @alias module:interact.pointerMoveTolerance\n   *\n   * @param {number} [newValue] The movement from the start position must be greater than this value\n   * @return {interact | number}\n   */\n  pointerMoveTolerance (newValue?: number) {\n    if (utils.is.number(newValue)) {\n      this.scope.interactions.pointerMoveTolerance = newValue\n\n      return this\n    }\n\n    return this.scope.interactions.pointerMoveTolerance\n  }\n\n  addDocument (doc: Document, options?: object) {\n    this.scope.addDocument(doc, options)\n  }\n\n  removeDocument (doc: Document) {\n    this.scope.removeDocument(doc)\n  }\n}\n\nexport default InteractStatic\n"
	]
}