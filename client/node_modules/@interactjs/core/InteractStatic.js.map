{
	"version": 3,
	"sources": [
		"InteractStatic.ts"
	],
	"names": [
		"browser",
		"utils",
		"isNonNativeEvent",
		"InteractStatic",
		"constructor",
		"scope",
		"getPointerAverage",
		"pointer",
		"pointerAverage",
		"getTouchBBox",
		"touchBBox",
		"getTouchDistance",
		"touchDistance",
		"getTouchAngle",
		"touchAngle",
		"getElementRect",
		"dom",
		"getElementClientRect",
		"matchesSelector",
		"closest",
		"globalEvents",
		"dynamicDrop",
		"version",
		"interact",
		"prototype",
		"target",
		"options",
		"interactable",
		"interactables",
		"get",
		"new",
		"events",
		"global",
		"key",
		"Object",
		"getOwnPropertyNames",
		"extend",
		"use",
		"plugin",
		"usePlugin",
		"isSet",
		"context",
		"on",
		"type",
		"listener",
		"is",
		"string",
		"search",
		"trim",
		"split",
		"array",
		"eventType",
		"object",
		"prop",
		"actions",
		"push",
		"add",
		"document",
		"off",
		"index",
		"indexOf",
		"splice",
		"remove",
		"debug",
		"supportsTouch",
		"supportsPointerEvent",
		"stop",
		"interaction",
		"interactions",
		"list",
		"pointerMoveTolerance",
		"newValue",
		"number",
		"addDocument",
		"doc",
		"removeDocument"
	],
	"mappings": "AAAA;AAEA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,mBAAvB;AAGA,SAASC,gBAAT,QAAiC,YAAjC;AAMA,OAAO,MAAMC,cAAN,CAAqB;AAC1B;AAeA;AAIAC,EAAAA,WAAW,CAAUC,KAAV,EAAiC;AAAA,SAAvBA,KAAuB,GAAvBA,KAAuB;AAAA,SAlB5CC,iBAkB4C,GAlBvBL,KAAK,CAACM,OAAN,CAAcC,cAkBS;AAAA,SAjB5CC,YAiB4C,GAjB7BR,KAAK,CAACM,OAAN,CAAcG,SAiBe;AAAA,SAhB5CC,gBAgB4C,GAhBzBV,KAAK,CAACM,OAAN,CAAcK,aAgBW;AAAA,SAf5CC,aAe4C,GAf5BZ,KAAK,CAACM,OAAN,CAAcO,UAec;AAAA,SAb5CC,cAa4C,GAb3Bd,KAAK,CAACe,GAAN,CAAUD,cAaiB;AAAA,SAZ5CE,oBAY4C,GAZrBhB,KAAK,CAACe,GAAN,CAAUC,oBAYW;AAAA,SAX5CC,eAW4C,GAX1BjB,KAAK,CAACe,GAAN,CAAUE,eAWgB;AAAA,SAV5CC,OAU4C,GAVlClB,KAAK,CAACe,GAAN,CAAUG,OAUwB;AAAA,SAR5CC,YAQ4C,GARxB,EAQwB;AAAA,SAN5CC,WAM4C;AAAA,SAH5CC,OAG4C;AAAA,SAF5CC,QAE4C;AAC1C,UAAM;AAAEC,MAAAA;AAAF,QAAgB,KAAKpB,WAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,UAAMmB,QAAQ,GAAI,CAACE,MAAD,EAASC,OAAT,KAAqB;AACrC,UAAIC,YAAY,GAAGtB,KAAK,CAACuB,aAAN,CAAoBC,GAApB,CAAwBJ,MAAxB,EAAgCC,OAAhC,CAAnB;;AAEA,UAAI,CAACC,YAAL,EAAmB;AACjBA,QAAAA,YAAY,GAAGtB,KAAK,CAACuB,aAAN,CAAoBE,GAApB,CAAwBL,MAAxB,EAAgCC,OAAhC,CAAf;AACAC,QAAAA,YAAY,CAACI,MAAb,CAAoBC,MAApB,GAA6B,KAAKZ,YAAlC;AACD;;AAED,aAAOO,YAAP;AACD,KATD;;AAWA,SAAK,MAAMM,GAAX,IAAkBC,MAAM,CAACC,mBAAP,CAA2B,KAAK/B,WAAL,CAAiBoB,SAA5C,CAAlB,EAA0E;AACxED,MAAAA,QAAQ,CAACU,GAAD,CAAR,GAAgBT,SAAS,CAACS,GAAD,CAAzB;AACD;;AAEDhC,IAAAA,KAAK,CAACmC,MAAN,CAAab,QAAb,EAA8B,IAA9B;AACAA,IAAAA,QAAQ,CAACnB,WAAT,GAAuB,KAAKA,WAA5B;AACA,SAAKmB,QAAL,GAAgBA,QAAhB;AAEA,WAAOA,QAAP;AACD;AAED;;;;;;;;;;;AASAc,EAAAA,GAAG,CAAEC,MAAF,EAA2BZ,OAA3B,EAA6D;AAC9D,SAAKrB,KAAL,CAAWkC,SAAX,CAAqBD,MAArB,EAA6BZ,OAA7B;AAEA,WAAO,IAAP;AACD;AAED;;;;;;;;;;;;AAUAc,EAAAA,KAAK,CAAEf,MAAF,EAA4BC,OAA5B,EAA2C;AAC9C,WAAO,CAAC,CAAC,KAAKrB,KAAL,CAAWuB,aAAX,CAAyBC,GAAzB,CAA6BJ,MAA7B,EAAqCC,OAAO,IAAIA,OAAO,CAACe,OAAxD,CAAT;AACD;AAED;;;;;;;;;;;;;AAWAC,EAAAA,EAAE,CAAEC,IAAF,EAAsCC,QAAtC,EAAuElB,OAAvE,EAAyF;AACzF,QAAIzB,KAAK,CAAC4C,EAAN,CAASC,MAAT,CAAgBH,IAAhB,KAAyBA,IAAI,CAACI,MAAL,CAAY,GAAZ,MAAqB,CAAC,CAAnD,EAAsD;AACpDJ,MAAAA,IAAI,GAAGA,IAAI,CAACK,IAAL,GAAYC,KAAZ,CAAkB,IAAlB,CAAP;AACD;;AAED,QAAIhD,KAAK,CAAC4C,EAAN,CAASK,KAAT,CAAeP,IAAf,CAAJ,EAA0B;AACxB,WAAK,MAAMQ,SAAX,IAAyBR,IAAzB,EAAyC;AACvC,aAAKD,EAAL,CAAQS,SAAR,EAAmBP,QAAnB,EAA6BlB,OAA7B;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAIzB,KAAK,CAAC4C,EAAN,CAASO,MAAT,CAAgBT,IAAhB,CAAJ,EAA2B;AACzB,WAAK,MAAMU,IAAX,IAAmBV,IAAnB,EAAyB;AACvB,aAAKD,EAAL,CAAQW,IAAR,EAAeV,IAAD,CAAcU,IAAd,CAAd,EAAmCT,QAAnC;AACD;;AAED,aAAO,IAAP;AACD,KAnBwF,CAqBzF;;;AACA,QAAI1C,gBAAgB,CAACyC,IAAD,EAAO,KAAKtC,KAAL,CAAWiD,OAAlB,CAApB,EAAgD;AAC9C;AACA,UAAI,CAAC,KAAKlC,YAAL,CAAkBuB,IAAlB,CAAL,EAA8B;AAC5B,aAAKvB,YAAL,CAAkBuB,IAAlB,IAA0B,CAACC,QAAD,CAA1B;AACD,OAFD,MAGK;AACH,aAAKxB,YAAL,CAAkBuB,IAAlB,EAAwBY,IAAxB,CAA6BX,QAA7B;AACD;AACF,KARD,CASA;AATA,SAUK;AACH,aAAKvC,KAAL,CAAW0B,MAAX,CAAkByB,GAAlB,CAAsB,KAAKnD,KAAL,CAAWoD,QAAjC,EAA2Cd,IAA3C,EAAiDC,QAAjD,EAAgF;AAAElB,UAAAA;AAAF,SAAhF;AACD;;AAED,WAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;AAYAgC,EAAAA,GAAG,CAAEf,IAAF,EAA6BC,QAA7B,EAA4ClB,OAA5C,EAA8D;AAC/D,QAAIzB,KAAK,CAAC4C,EAAN,CAASC,MAAT,CAAgBH,IAAhB,KAAyBA,IAAI,CAACI,MAAL,CAAY,GAAZ,MAAqB,CAAC,CAAnD,EAAsD;AACpDJ,MAAAA,IAAI,GAAGA,IAAI,CAACK,IAAL,GAAYC,KAAZ,CAAkB,IAAlB,CAAP;AACD;;AAED,QAAIhD,KAAK,CAAC4C,EAAN,CAASK,KAAT,CAAeP,IAAf,CAAJ,EAA0B;AACxB,WAAK,MAAMQ,SAAX,IAAwBR,IAAxB,EAA8B;AAC5B,aAAKe,GAAL,CAASP,SAAT,EAAoBP,QAApB,EAA8BlB,OAA9B;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAIzB,KAAK,CAAC4C,EAAN,CAASO,MAAT,CAAgBT,IAAhB,CAAJ,EAA2B;AACzB,WAAK,MAAMU,IAAX,IAAmBV,IAAnB,EAAyB;AACvB,aAAKe,GAAL,CAASL,IAAT,EAAeV,IAAI,CAACU,IAAD,CAAnB,EAA2BT,QAA3B;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAI1C,gBAAgB,CAACyC,IAAD,EAAO,KAAKtC,KAAL,CAAWiD,OAAlB,CAApB,EAAgD;AAC9C,UAAIK,KAAJ;;AAEA,UAAIhB,IAAI,IAAI,KAAKvB,YAAb,IACA,CAACuC,KAAK,GAAG,KAAKvC,YAAL,CAAkBuB,IAAlB,EAAwBiB,OAAxB,CAAgChB,QAAhC,CAAT,MAAwD,CAAC,CAD7D,EACgE;AAC9D,aAAKxB,YAAL,CAAkBuB,IAAlB,EAAwBkB,MAAxB,CAA+BF,KAA/B,EAAsC,CAAtC;AACD;AACF,KAPD,MAQK;AACH,WAAKtD,KAAL,CAAW0B,MAAX,CAAkB+B,MAAlB,CAAyB,KAAKzD,KAAL,CAAWoD,QAApC,EAA8Cd,IAA9C,EAAoDC,QAApD,EAA8DlB,OAA9D;AACD;;AAED,WAAO,IAAP;AACD;;AAEDqC,EAAAA,KAAK,GAAI;AACP,WAAO,KAAK1D,KAAZ;AACD;AAED;;;;;;;AAKA2D,EAAAA,aAAa,GAAI;AACf,WAAOhE,OAAO,CAACgE,aAAf;AACD;AAED;;;;;;;AAKAC,EAAAA,oBAAoB,GAAI;AACtB,WAAOjE,OAAO,CAACiE,oBAAf;AACD;AAED;;;;;;;;;AAOAC,EAAAA,IAAI,GAAI;AACN,SAAK,MAAMC,WAAX,IAA0B,KAAK9D,KAAL,CAAW+D,YAAX,CAAwBC,IAAlD,EAAwD;AACtDF,MAAAA,WAAW,CAACD,IAAZ;AACD;;AAED,WAAO,IAAP;AACD;AAED;;;;;;;;;;;AASAI,EAAAA,oBAAoB,CAAEC,QAAF,EAAqB;AACvC,QAAItE,KAAK,CAAC4C,EAAN,CAAS2B,MAAT,CAAgBD,QAAhB,CAAJ,EAA+B;AAC7B,WAAKlE,KAAL,CAAW+D,YAAX,CAAwBE,oBAAxB,GAA+CC,QAA/C;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAKlE,KAAL,CAAW+D,YAAX,CAAwBE,oBAA/B;AACD;;AAEDG,EAAAA,WAAW,CAAEC,GAAF,EAAiBhD,OAAjB,EAAmC;AAC5C,SAAKrB,KAAL,CAAWoE,WAAX,CAAuBC,GAAvB,EAA4BhD,OAA5B;AACD;;AAEDiD,EAAAA,cAAc,CAAED,GAAF,EAAiB;AAC7B,SAAKrE,KAAL,CAAWsE,cAAX,CAA0BD,GAA1B;AACD;;AAnQyB;AAsQ5B,eAAevE,cAAf",
	"sourcesContent": [
		"/** @module interact */\n\nimport browser from '@interactjs/utils/browser'\nimport * as utils from '@interactjs/utils/index'\nimport Interactable from './Interactable'\nimport { Options } from './defaultOptions'\nimport { isNonNativeEvent } from './scope'\n\nexport interface InteractStatic {\n  (target: Interact.Target, options?: Options): Interactable\n}\n\nexport class InteractStatic {\n  // expose the functions used to calculate multi-touch properties\n  getPointerAverage  = utils.pointer.pointerAverage\n  getTouchBBox = utils.pointer.touchBBox\n  getTouchDistance = utils.pointer.touchDistance\n  getTouchAngle = utils.pointer.touchAngle\n\n  getElementRect = utils.dom.getElementRect\n  getElementClientRect = utils.dom.getElementClientRect\n  matchesSelector = utils.dom.matchesSelector\n  closest = utils.dom.closest\n\n  globalEvents: any = {}\n\n  dynamicDrop: (newValue?: boolean) => boolean | this\n\n  // eslint-disable-next-line no-undef\n  version = process.env.npm_package_version\n  interact: InteractStatic\n\n  constructor (private scope: Interact.Scope) {\n    const { prototype } = this.constructor\n\n    /**\n     * ```js\n     * interact('#draggable').draggable(true)\n     *\n     * var rectables = interact('rect')\n     * rectables\n     *   .gesturable(true)\n     *   .on('gesturemove', function (event) {\n     *       // ...\n     *   })\n     * ```\n     *\n     * The methods of this variable can be used to set elements as interactables\n     * and also to change various default settings.\n     *\n     * Calling it as a function and passing an element or a valid CSS selector\n     * string returns an Interactable object which has various methods to configure\n     * it.\n     *\n     * @global\n     *\n     * @param {Element | string} target The HTML or SVG Element to interact with\n     * or CSS selector\n     * @return {Interactable}\n     */\n    const interact = ((target, options) => {\n      let interactable = scope.interactables.get(target, options)\n\n      if (!interactable) {\n        interactable = scope.interactables.new(target, options)\n        interactable.events.global = this.globalEvents\n      }\n\n      return interactable\n    }) as InteractStatic\n\n    for (const key of Object.getOwnPropertyNames(this.constructor.prototype)) {\n      interact[key] = prototype[key]\n    }\n\n    utils.extend(interact as any, this)\n    interact.constructor = this.constructor\n    this.interact = interact\n\n    return interact\n  }\n\n  /**\n   * Use a plugin\n   *\n   * @alias module:interact.use\n   *\n   * @param {Object} plugin\n   * @param {function} plugin.install\n   * @return {InteractStatic}\n   */\n  use (plugin: Interact.Plugin, options?: { [key: string]: any }) {\n    this.scope.usePlugin(plugin, options)\n\n    return this\n  }\n\n  /**\n   * Check if an element or selector has been set with the {@link interact}\n   * function\n   *\n   * @alias module:interact.isSet\n   *\n   * @param {Element} element The Element being searched for\n   * @return {boolean} Indicates if the element or CSS selector was previously\n   * passed to interact\n   */\n  isSet (target: Interact.Element, options?: any) {\n    return !!this.scope.interactables.get(target, options && options.context)\n  }\n\n  /**\n   * Add a global listener for an InteractEvent or adds a DOM event to `document`\n   *\n   * @alias module:interact.on\n   *\n   * @param {string | array | object} type The types of events to listen for\n   * @param {function} listener The function event (s)\n   * @param {object | boolean} [options] object or useCapture flag for\n   * addEventListener\n   * @return {object} interact\n   */\n  on (type: string | Interact.EventTypes, listener: Interact.ListenersArg, options?: object) {\n    if (utils.is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (utils.is.array(type)) {\n      for (const eventType of (type as any[])) {\n        this.on(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (utils.is.object(type)) {\n      for (const prop in type) {\n        this.on(prop, (type as any)[prop], listener)\n      }\n\n      return this\n    }\n\n    // if it is an InteractEvent type, add listener to globalEvents\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      // if this type of event was never bound\n      if (!this.globalEvents[type]) {\n        this.globalEvents[type] = [listener]\n      }\n      else {\n        this.globalEvents[type].push(listener)\n      }\n    }\n    // If non InteractEvent type, addEventListener to document\n    else {\n      this.scope.events.add(this.scope.document, type, listener as Interact.Listener, { options })\n    }\n\n    return this\n  }\n\n  /**\n   * Removes a global InteractEvent listener or DOM event from `document`\n   *\n   * @alias module:interact.off\n   *\n   * @param {string | array | object} type The types of events that were listened\n   * for\n   * @param {function} listener The listener function to be removed\n   * @param {object | boolean} options [options] object or useCapture flag for\n   * removeEventListener\n   * @return {object} interact\n   */\n  off (type: Interact.EventTypes, listener: any, options?: object) {\n    if (utils.is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (utils.is.array(type)) {\n      for (const eventType of type) {\n        this.off(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (utils.is.object(type)) {\n      for (const prop in type) {\n        this.off(prop, type[prop], listener)\n      }\n\n      return this\n    }\n\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      let index: number\n\n      if (type in this.globalEvents &&\n          (index = this.globalEvents[type].indexOf(listener)) !== -1) {\n        this.globalEvents[type].splice(index, 1)\n      }\n    }\n    else {\n      this.scope.events.remove(this.scope.document, type, listener, options)\n    }\n\n    return this\n  }\n\n  debug () {\n    return this.scope\n  }\n\n  /**\n   * @alias module:interact.supportsTouch\n   *\n   * @return {boolean} Whether or not the browser supports touch input\n   */\n  supportsTouch () {\n    return browser.supportsTouch\n  }\n\n  /**\n   * @alias module:interact.supportsPointerEvent\n   *\n   * @return {boolean} Whether or not the browser supports PointerEvents\n   */\n  supportsPointerEvent () {\n    return browser.supportsPointerEvent\n  }\n\n  /**\n   * Cancels all interactions (end events are not fired)\n   *\n   * @alias module:interact.stop\n   *\n   * @return {object} interact\n   */\n  stop () {\n    for (const interaction of this.scope.interactions.list) {\n      interaction.stop()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns or sets the distance the pointer must be moved before an action\n   * sequence occurs. This also affects tolerance for tap events.\n   *\n   * @alias module:interact.pointerMoveTolerance\n   *\n   * @param {number} [newValue] The movement from the start position must be greater than this value\n   * @return {interact | number}\n   */\n  pointerMoveTolerance (newValue?: number) {\n    if (utils.is.number(newValue)) {\n      this.scope.interactions.pointerMoveTolerance = newValue\n\n      return this\n    }\n\n    return this.scope.interactions.pointerMoveTolerance\n  }\n\n  addDocument (doc: Document, options?: object) {\n    this.scope.addDocument(doc, options)\n  }\n\n  removeDocument (doc: Document) {\n    this.scope.removeDocument(doc)\n  }\n}\n\nexport default InteractStatic\n"
	]
}