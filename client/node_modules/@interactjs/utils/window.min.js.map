{
	"version": 3,
	"sources": [
		"window.ts"
	],
	"names": [
		"isWindow",
		"win",
		"realWindow",
		"undefined",
		"window",
		"getWindow",
		"init",
		"el",
		"document",
		"createTextNode",
		"ownerDocument",
		"wrap",
		"node",
		"defaultView"
	],
	"mappings": "OAAOA,MAAc,oBAErB,MAAMC,EAAM,CACVC,gBAAYC,EACZC,YAAQD,EACRE,UAAAA,UACAC,KAAAA,aAGK,SAASA,KAAMF,GAGpBH,EAAIC,WAAaE,EAGjB,MAAMG,EAAKH,EAAOI,SAASC,eAAe,IAGtCF,EAAGG,gBAAkBN,EAAOI,UACL,mBAAhBJ,EAAOO,MAChBP,EAAOO,KAAKJ,KAAQA,IAEpBH,EAASA,EAAOO,KAAKP,IAGvBH,EAAIG,OAASA,EAGO,oBAAXA,QACTH,EAAIG,YAAaD,EACjBF,EAAIC,gBAAaC,GAGjBG,KAAKF,eAGA,SAASC,UAAWO,GACzB,GAAIZ,EAASY,GACX,OAAOA,EAKT,OAFkBA,EAAKF,eAAiBE,GAExBC,aAAeZ,EAAIG,OAGrCH,EAAIK,KAAOA,oBAEIL",
	"sourcesContent": [
		"import isWindow from './isWindow'\n\nconst win = {\n  realWindow: undefined as Window,\n  window: undefined as Window,\n  getWindow,\n  init,\n}\n\nexport function init (window: Window & { wrap?: (...args: any[]) => any }) {\n  // get wrapped window if using Shadow DOM polyfill\n\n  win.realWindow = window\n\n  // create a TextNode\n  const el = window.document.createTextNode('')\n\n  // check if it's wrapped by a polyfill\n  if (el.ownerDocument !== window.document &&\n      typeof window.wrap === 'function' &&\n    window.wrap(el) === el) {\n    // use wrapped window\n    window = window.wrap(window)\n  }\n\n  win.window = window\n}\n\nif (typeof window === 'undefined') {\n  win.window     = undefined\n  win.realWindow = undefined\n}\nelse {\n  init(window)\n}\n\nexport function getWindow (node: any) {\n  if (isWindow(node)) {\n    return node\n  }\n\n  const rootNode = (node.ownerDocument || node)\n\n  return rootNode.defaultView || win.window\n}\n\nwin.init = init\n\nexport default win\n"
	]
}