{
	"version": 3,
	"sources": [
		"pointerUtils.ts"
	],
	"names": [
		"browser",
		"dom",
		"domUtils",
		"hypot",
		"is",
		"pointerExtend",
		"copyCoords",
		"dest",
		"src",
		"page",
		"x",
		"y",
		"client",
		"timeStamp",
		"setCoordDeltas",
		"targetObj",
		"prev",
		"cur",
		"setCoordVelocity",
		"delta",
		"dt",
		"Math",
		"max",
		"setZeroCoords",
		"isNativePointer",
		"pointer",
		"Event",
		"Touch",
		"getXY",
		"type",
		"xy",
		"getPageXY",
		"isOperaMobile",
		"window",
		"scrollX",
		"scrollY",
		"getClientXY",
		"getPointerId",
		"number",
		"pointerId",
		"identifier",
		"setCoords",
		"pointers",
		"length",
		"pointerAverage",
		"tmpXY",
		"getTouchPair",
		"event",
		"touches",
		"array",
		"changedTouches",
		"average",
		"pageX",
		"pageY",
		"clientX",
		"clientY",
		"screenX",
		"screenY",
		"prop",
		"touchBBox",
		"minX",
		"min",
		"minY",
		"maxX",
		"maxY",
		"left",
		"top",
		"right",
		"bottom",
		"width",
		"height",
		"touchDistance",
		"deltaSource",
		"sourceX",
		"sourceY",
		"dx",
		"dy",
		"touchAngle",
		"atan2",
		"PI",
		"getPointerType",
		"string",
		"pointerType",
		"undefined",
		"test",
		"getEventTargets",
		"path",
		"func",
		"composedPath",
		"getActualElement",
		"target",
		"currentTarget",
		"newCoords",
		"coordsToEvent",
		"coords",
		"this",
		"buttons",
		"preventDefault"
	],
	"mappings": "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",
	"sourcesContent": [
		"import browser from './browser'\nimport dom from './domObjects'\nimport * as domUtils from './domUtils'\nimport hypot from './hypot'\nimport * as is from './is'\nimport pointerExtend from './pointerExtend'\n\nexport function copyCoords (dest: Interact.CoordsSetMember, src: Interact.CoordsSetMember) {\n  dest.page = dest.page || {} as any\n  dest.page.x = src.page.x\n  dest.page.y = src.page.y\n\n  dest.client = dest.client || {} as any\n  dest.client.x = src.client.x\n  dest.client.y = src.client.y\n\n  dest.timeStamp = src.timeStamp\n}\n\nexport function setCoordDeltas (targetObj: Interact.CoordsSetMember, prev: Interact.CoordsSetMember, cur: Interact.CoordsSetMember) {\n  targetObj.page.x    = cur.page.x    - prev.page.x\n  targetObj.page.y    = cur.page.y    - prev.page.y\n  targetObj.client.x  = cur.client.x  - prev.client.x\n  targetObj.client.y  = cur.client.y  - prev.client.y\n  targetObj.timeStamp = cur.timeStamp - prev.timeStamp\n}\n\nexport function setCoordVelocity (targetObj: Interact.CoordsSetMember, delta: Interact.CoordsSetMember) {\n  const dt = Math.max(delta.timeStamp / 1000, 0.001)\n\n  targetObj.page.x   = delta.page.x / dt\n  targetObj.page.y   = delta.page.y / dt\n  targetObj.client.x = delta.client.x / dt\n  targetObj.client.y = delta.client.y / dt\n  targetObj.timeStamp = dt\n}\n\nexport function setZeroCoords (targetObj: Interact.CoordsSetMember) {\n  targetObj.page.x = 0\n  targetObj.page.y = 0\n  targetObj.client.x = 0\n  targetObj.client.y = 0\n}\n\nexport function isNativePointer  (pointer: any) {\n  return (pointer instanceof dom.Event || pointer instanceof dom.Touch)\n}\n\n// Get specified X/Y coords for mouse or event.touches[0]\nexport function getXY (type, pointer, xy) {\n  xy = xy || {}\n  type = type || 'page'\n\n  xy.x = pointer[type + 'X']\n  xy.y = pointer[type + 'Y']\n\n  return xy\n}\n\nexport function getPageXY (pointer: Interact.PointerType | Interact.InteractEvent, page?: Interact.Point) {\n  page = page || { x: 0, y: 0 }\n\n  // Opera Mobile handles the viewport and scrolling oddly\n  if (browser.isOperaMobile && isNativePointer(pointer)) {\n    getXY('screen', pointer, page)\n\n    page.x += window.scrollX\n    page.y += window.scrollY\n  }\n  else {\n    getXY('page', pointer, page)\n  }\n\n  return page\n}\n\nexport function getClientXY (pointer, client) {\n  client = client || {}\n\n  if (browser.isOperaMobile && isNativePointer(pointer)) {\n    // Opera Mobile handles the viewport and scrolling oddly\n    getXY('screen', pointer, client)\n  }\n  else {\n    getXY('client', pointer, client)\n  }\n\n  return client\n}\n\nexport function getPointerId (pointer) {\n  return is.number(pointer.pointerId) ? pointer.pointerId : pointer.identifier\n}\n\nexport function setCoords (targetObj, pointers: any[], timeStamp: number) {\n  const pointer = (pointers.length > 1\n    ? pointerAverage(pointers)\n    : pointers[0])\n\n  const tmpXY = {} as { x: number, y: number }\n\n  getPageXY(pointer, tmpXY)\n  targetObj.page.x = tmpXY.x\n  targetObj.page.y = tmpXY.y\n\n  getClientXY(pointer, tmpXY)\n  targetObj.client.x = tmpXY.x\n  targetObj.client.y = tmpXY.y\n\n  targetObj.timeStamp = timeStamp\n}\n\nexport function getTouchPair (event) {\n  const touches = []\n\n  // array of touches is supplied\n  if (is.array(event)) {\n    touches[0] = event[0]\n    touches[1] = event[1]\n  }\n  // an event\n  else {\n    if (event.type === 'touchend') {\n      if (event.touches.length === 1) {\n        touches[0] = event.touches[0]\n        touches[1] = event.changedTouches[0]\n      }\n      else if (event.touches.length === 0) {\n        touches[0] = event.changedTouches[0]\n        touches[1] = event.changedTouches[1]\n      }\n    }\n    else {\n      touches[0] = event.touches[0]\n      touches[1] = event.touches[1]\n    }\n  }\n\n  return touches\n}\n\nexport function pointerAverage (pointers: PointerEvent[] | Event[]) {\n  const average = {\n    pageX  : 0,\n    pageY  : 0,\n    clientX: 0,\n    clientY: 0,\n    screenX: 0,\n    screenY: 0,\n  }\n\n  for (const pointer of pointers) {\n    for (const prop in average) {\n      average[prop] += pointer[prop]\n    }\n  }\n  for (const prop in average) {\n    average[prop] /= pointers.length\n  }\n\n  return average\n}\n\nexport function touchBBox (event: Event | Array<(Interact.PointerType) | TouchEvent>) {\n  if (!(event as any).length &&\n      !((event as TouchEvent).touches &&\n        (event as TouchEvent).touches.length > 1)) {\n    return null\n  }\n\n  const touches = getTouchPair(event)\n  const minX = Math.min(touches[0].pageX, touches[1].pageX)\n  const minY = Math.min(touches[0].pageY, touches[1].pageY)\n  const maxX = Math.max(touches[0].pageX, touches[1].pageX)\n  const maxY = Math.max(touches[0].pageY, touches[1].pageY)\n\n  return {\n    x: minX,\n    y: minY,\n    left: minX,\n    top: minY,\n    right: maxX,\n    bottom: maxY,\n    width: maxX - minX,\n    height: maxY - minY,\n  }\n}\n\nexport function touchDistance (event, deltaSource) {\n  const sourceX = deltaSource + 'X'\n  const sourceY = deltaSource + 'Y'\n  const touches = getTouchPair(event)\n\n  const dx = touches[0][sourceX] - touches[1][sourceX]\n  const dy = touches[0][sourceY] - touches[1][sourceY]\n\n  return hypot(dx, dy)\n}\n\nexport function touchAngle (event, deltaSource) {\n  const sourceX = deltaSource + 'X'\n  const sourceY = deltaSource + 'Y'\n  const touches = getTouchPair(event)\n  const dx = touches[1][sourceX] - touches[0][sourceX]\n  const dy = touches[1][sourceY] - touches[0][sourceY]\n  const angle = 180 * Math.atan2(dy, dx) / Math.PI\n\n  return  angle\n}\n\nexport function getPointerType (pointer) {\n  return is.string(pointer.pointerType)\n    ? pointer.pointerType\n    : is.number(pointer.pointerType)\n      ? [undefined, undefined, 'touch', 'pen', 'mouse'][pointer.pointerType]\n      // if the PointerEvent API isn't available, then the \"pointer\" must\n      // be either a MouseEvent, TouchEvent, or Touch object\n      : /touch/.test(pointer.type) || pointer instanceof dom.Touch\n        ? 'touch'\n        : 'mouse'\n}\n\n// [ event.target, event.currentTarget ]\nexport function getEventTargets (event) {\n  const path = is.func(event.composedPath) ? event.composedPath() : event.path\n\n  return [\n    domUtils.getActualElement(path ? path[0] : event.target),\n    domUtils.getActualElement(event.currentTarget),\n  ]\n}\n\nexport function newCoords (): Interact.CoordsSetMember {\n  return {\n    page     : { x: 0, y: 0 },\n    client   : { x: 0, y: 0 },\n    timeStamp: 0,\n  }\n}\n\nexport function coordsToEvent (coords: MockCoords) {\n  const event = {\n    coords,\n    get page () { return this.coords.page },\n    get client () { return this.coords.client },\n    get timeStamp () { return this.coords.timeStamp },\n    get pageX () { return this.coords.page.x },\n    get pageY () { return this.coords.page.y },\n    get clientX () { return this.coords.client.x },\n    get clientY () { return this.coords.client.y },\n    get pointerId () { return this.coords.pointerId },\n    get target () { return this.coords.target },\n    get type () { return this.coords.type },\n    get pointerType () { return this.coords.pointerType },\n    get buttons () { return this.coords.buttons },\n    preventDefault () {},\n  }\n\n  return event as typeof event & Interact.PointerType & Interact.PointerEventType\n}\n\nexport interface MockCoords {\n  page: Interact.Point\n  client: Interact.Point\n  timeStamp?: number\n  pointerId?: any\n  target?: any\n  type?: string\n  pointerType?: string\n  buttons?: number\n}\n\nexport { pointerExtend }\n"
	]
}